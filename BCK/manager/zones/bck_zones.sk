on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading zones..." to console
        send "§6[§4BCK§6/§2Zones§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/zones/config.yml" as "bck.manager.zones.config"
        load yaml "plugins/Skript/scripts/BCK/manager/zones/data.yml" as "bck.manager.zones.data"
        customRecipes()
    else:
        broadcast "§6[§4BCK§6/§2Zones§6]§r Script loading cancel It requires (bck_manager.sk)"
        unload script file "bck_zones.sk"
on break:
    set {_list::*} to zonesCheck("bck.manager.zones.data", "data.area")
    if {_list::*} is set:
        loop {_list::*}:
            set {_name} to zonesData("%loop-value%.name")
            set {_radius} to zonesDataNumber("%loop-value%.radius")
            set {_loc} to zonesDataLocation("%loop-value%")
            loop all blocks in radius {_radius} around {_loc}:
                if location of loop-block is location of event-block:
                    cancel event
                    send zonesConfig("data.messages.break") to player
on right click:
    if clicked block is set:
        set {_list::*} to zonesCheck("bck.manager.zones.data", "data.area")
        if {_list::*} is set:
            loop {_list::*}:
                set {_name} to zonesData("%loop-value%.name")
                set {_radius} to zonesDataNumber("%loop-value%.radius")
                set {_loc} to zonesDataLocation("%loop-value%")
                loop all blocks in radius {_radius} around {_loc}:
                    if location of loop-block is location of event-block:
                        cancel event
                        send zonesConfig("data.messages.interact") to player
    stop
command /zones [<text>]:
    trigger:
        if arg-1 is set:
            if arg-1 is "add":
            else if arg-1 is "remove":
            else if arg-1 is "list":
                set {_list::*} to zonesCheck("bck.manager.zones.data", "data.area")
                if {_list::*} is set:
                    set {_zn} to listCounter({_list::*})
                    set {_zt} to "zone"
                    if {_zn} > 1:
                        set {_zt} to "zones" 
                    send "§8----{ §2§lZones§r §8}----"
                    loop {_list::*}:
                        set {_name} to zonesData("%loop-value%.name")
                        set {_radius} to zonesDataNumber("%loop-value%.radius")
                        set {_loc} to zonesDataLocation("%loop-value%")
                        send formatted colored "§8-> §bNom: §3%{_name}% §8-> §dRadius: §5%{_radius}% §8-> §aLocation: §2%{_loc}%"
                    send "§6Total: §c§l§n%{_zn}%§r §e%{_zt}%"
                    send {_list::*}
                else:
                    send "§eAucune zone n'as été trouver.."
            else:
                send "§cOption inconnue (%arg-1%)"
        else:
            send "§c/zones <options>"
on tab complete of "/zones":
    set tab completions for position 1 to "add", "remove" and "list"
function zonesCheck(id: text, key: text) :: objects:
    loop yaml node keys {_key} from {_id}:
        add loop-node to {_list::*}
    return {_list::*}
function zonesConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.zones.config"
            save yaml "bck.manager.zones.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.zones.config" to {_data}
            save yaml "bck.manager.zones.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.zones.config" to {_data}
        save yaml "bck.manager.zones.config"
    return "%{_result}%"
function zonesConfigNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.zones.config"
            save yaml "bck.manager.zones.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.zones.config" to {_data}
            save yaml "bck.manager.zones.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.zones.config" to {_data}
        save yaml "bck.manager.zones.config"
    set {_r} to "%{_result}%" parsed as number
    return {_r}
function zonesData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.zones.data"
            save yaml "bck.manager.zones.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.zones.data" to {_data}
            save yaml "bck.manager.zones.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.zones.data" to {_data}
        save yaml "bck.manager.zones.data"
    return "%{_result}%"
function zonesDataNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.zones.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.zones.data"
            save yaml "bck.manager.zones.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.zones.data" to {_data}
            save yaml "bck.manager.zones.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.zones.data" to {_data}
        save yaml "bck.manager.zones.data"
    set {_r} to "%{_result}%" parsed as number
    return {_r}
function zonesDataLocation(find: text, mode: text="extract", data: text="") :: location:
    if {_mode} is "extract":
        set {_list::*} to zonesCheck("bck.manager.zones.data", {_find})
        loop {_list::*}:
            set {_x} to zonesDataNumber("%loop-value%.x")
            set {_y} to zonesDataNumber("%loop-value%.y")
            set {_z} to zonesDataNumber("%loop-value%.z")
            set {_w} to zonesData("%loop-value%.world")

    return location({_x}, {_y}, {_z}, {_w})