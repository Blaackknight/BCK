on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading recipe..." to console
        send "§6[§4BCK§6/§aRecipe§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/recipe/config.yml" as "bck.manager.recipe.config"
        load yaml "plugins/Skript/scripts/BCK/manager/recipe/data.yml" as "bck.manager.recipe.data"
        customRecipes()
    else:
        broadcast "§6[§4BCK§6/§aRecipe§6]§r Script loading cancel It requires (bck_manager.sk)"
        unload script file "bck_recipe.sk"
function customRecipes():
    set {_super_dirt} to dirt named "§dSuper Dirt"
    register new shaped recipe for {_super_dirt} using dirt, dirt, dirt and dirt with id "super_dirt"
    registerRecipe("super_dirt", {_super_dirt})
    set {_supra_dirt} to dirt named "§bSupra Dirt"
    register new shaped recipe for {_supra_dirt} using dirt, dirt, dirt and dirt with id "supra_dirt"
    registerRecipe("supra_dirt", {_supra_dirt})
function registerRecipe(id: text, result: item):
    set {_list::*} to yaml list "data.recipes" from "bck.manager.recipe.data"
    if {_list::*} is set:
        set {_t} to type of {_result}
        set {_n} to display name of {_result}
        if {_n} is not set:
            set {_n} to {_t}
        add "%{_id}%|%{_t}%|%{_n}%" to {_list::*}
        set yaml list "data.recipes" from "bck.manager.recipe.data" to {_list::*}
        save yaml "bck.manager.recipe.data"
    else:
        set {_t} to type of {_result}
        set {_n} to display name of {_result}
        if {_n} is not set:
            set {_n} to {_t}
        add "%{_id}%|%{_t}%|%{_n}%" to {_list::*}
        set yaml list "data.recipes" from "bck.manager.recipe.data" to {_list::*}
        save yaml "bck.manager.recipe.data"
function recipeConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.config"
            save yaml "bck.manager.recipe.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
            save yaml "bck.manager.recipe.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
        save yaml "bck.manager.recipe.config"
    return "%{_result}%"
function recipeConfigNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.config"
            save yaml "bck.manager.recipe.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
            save yaml "bck.manager.recipe.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
        save yaml "bck.manager.recipe.config"
    set {_r} to "%{_result}%" parsed as number
    return {_r}
function recipeData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.data"
            save yaml "bck.manager.recipe.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
            save yaml "bck.manager.recipe.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
        save yaml "bck.manager.recipe.data"
    return "%{_result}%"
function recipeDataNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.data"
            save yaml "bck.manager.recipe.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
            save yaml "bck.manager.recipe.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
        save yaml "bck.manager.recipe.data"
    set {_r} to "%{_result}%" parsed as number
    return {_r}