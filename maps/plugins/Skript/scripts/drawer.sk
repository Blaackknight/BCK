on sign change:
    if line 1 is "drawer":
        set line 1 to "§6[§aDrawer§6]"
        set line 2 to "<id>"
        set line 3 to ""
        set line 4 to "<player>"
        logCustom("%selector(event-player)% has just created a drawer at %event-location%", 3)
        logCustom("%selector(event-player)% has just created a drawer at %event-location%", 4)
        logCustom("%selector(event-player)% has just created a drawer at %event-location%", 5)

on right click on sign:
    if line 1 is "§6[§aDrawer§6]":
        if player is sneaking:
            #send "§6[§aDrawer§e]§r §7right click §r%player% sneak, (%event-block%)" to player
            set {_player} to line 4 parsed as player
            if player's tool is not air:
                set {_h} to player's tool
                set {_i} to type of player's tool
                set {_n} to item amount of player's tool
                set {_l::*} to uncolored lore of player's tool
    

                loop getDrawerItemBlacklist():
                    if loop-value is "%{_i}%":
                        send "§b§l%{_i}%§r §eis §cblacklisted §e!"
                        stop
                loop getDrawerLoreBlacklist():
                    if {_l::*} contain loop-value:
                        send "§b§l%{_i}%§r §ewith lore §d(%loop-value%)§e is §cblacklisted §e!"
                        stop
                if itemIsEnchanted({_h}) is true:
                    send "§b§l%{_i}%§r §ewith enchantments is §cblacklisted §e!"
                    stop
                #send "Number: %{_n}% / %{_i}%" to player
                if line 2 is "<id>":
                    set line 2 to "%{_i}%"
                    set {_num} to line 3 parsed as integer
                    set line 3 to "%{_num} + {_n}%"
                    set line 4 to "%player%"
                    remove {_n} of {_h} from player's tool
                else if line 2 is not "<id>":
                    set {_type} to line 2
                    set {_ii} to "%{_i}%"
                    if {_ii} = {_type}:
                        set line 2 to "%{_i}%"
                        set {_num} to line 3 parsed as integer
                        set line 3 to "%{_num} + {_n}%"
                        set line 4 to "%player%"
                        remove {_n} of {_h} from player's tool
                    else:
                        send "§6[§aDrawer§6] §cIt is not the same type of item.."
            else:
                if player is op:
                    set {_item} to line 2 parsed as item
                    set {_amount} to line 3 parsed as integer
                    set {_player} to line 4 parsed as player
                    if line 2 is not "<id>":
                        if line 4 is not "<player>":
                            send formatted "§6§l⦑ Drawer Informations ⦒%nl%§7⁃ Joueur:§b %selector({_player})%%nl%§7⁃ Item:§b %{_item}%%nl%§7⁃ Amount:§b %{_amount}%"
             
        else:
            set {_player} to line 4 parsed as player
            if player's tool is not air:
                set {_h} to player's tool
                set {_i} to type of player's tool
                set {_n} to item amount of player's tool
                set {_l::*} to uncolored lore of player's tool
                loop getDrawerItemBlacklist():
                    if loop-value is "%{_i}%":
                        send "§b§l%{_i}%§r §eis §cblacklisted §e!"
                        stop
                loop getDrawerLoreBlacklist():
                    if {_l::*} contain loop-value:
                        send "§b§l%{_i}%§r §ewith lore §d(%loop-value%)§e is §cblacklisted §e!"
                        stop
                if itemIsEnchanted({_h}) is true:
                    send "§b§l%{_i}%§r §ewith enchantments is §cblacklisted §e!"
                    stop
                #send "Number: %{_n}% / %{_i}%" to player
                if line 2 is "<id>":
                    if line 4 is "<player>":
                        set line 2 to "%{_i}%"
                        set {_num} to line 3 parsed as integer
                        set line 3 to "%{_num} + 1%"
                        set line 4 to "%player%"
                        remove 1 of {_h} from player's tool
                else if line 2 is not "<id>":
                    if {_player} = player:
                        set {_type} to line 2
                        set {_ii} to "%{_i}%"
                        if {_ii} = {_type}:
                            set line 2 to "%{_i}%"
                            set {_num} to line 3 parsed as integer
                            set line 3 to "%{_num} + 1%"
                            set line 4 to "%player%"
                            remove 1 of {_h} from player's tool
                        else:
                            send "§6[§aDrawer§6] §cIt is not the same type of item.."
                    else:
                        send "§6[§aDrawer§6] §cThis sign is not yours.."  
             
on left click on sign:
    if line 1 is "§6[§aDrawer§6]":
        if player's gamemode is creative:
            stop
        if player is sneaking:
            set {_player} to line 4 parsed as player
            set {_h} to player's tool
            set {_n} to item amount of player's tool
            set {_i} to line 2 parsed as item
            set {_num} to line 3 parsed as integer
            if line 2 is not "<id>":
                if line 4 is not "<player>":
                    if player = {_player}:
                        if {_num} >= 1:
                            if {_num} = 1:
                                add 1 of {_i} to player's inventory
                                set line 3 to "%{_num} - 1%"
                            else if {_num} < 64:
                                add {_num} of {_i} to player's inventory
                                set line 3 to "%{_num} - {_num}%"
                            else if {_num} >= 64:
                                add 64 of {_i} to player's inventory
                                set line 3 to "%{_num} - 64%"
                        else:
                            set line 2 to "<id>"
                            set line 3 to ""
                            set line 4 to "<player>"
                    else:
                        send "§6[§aDrawer§6] §cThis sign is not yours.."
            #send "§6[§aDrawer§6]§r §7left click §r%player% sneak, (%event-block%)" to player
        else:
            set {_player} to line 4 parsed as player
            set {_h} to player's tool
            set {_n} to item amount of player's tool
            set {_i} to line 2 parsed as item
            set {_num} to line 3 parsed as integer
            if line 2 is not "<id>":
                if line 4 is not "<player>":
                    if player = {_player}:
                        if {_num} >= 1:
                            add 1 of {_i} to player's inventory
                            set line 3 to "%{_num} - 1%"
                        else:
                            set line 2 to "<id>"
                            set line 3 to ""
                            set line 4 to "<player>"
                    else:
                        send "§6[§aDrawer§6] §cThis sign is not yours.."
            #send "Number: %{_n}%" to player
            #send "§6[§aDrawer§6]§r §7left click §r%player% not sneak with %player's tool%, (%event-block%)" to player
            #send "§6[§aDrawer§6]§r §7left click §r%player% not sneak, (%event-block%)" to player
on break of sign:
    if line 1 is "§6[§aDrawer§6]":
        if player's gamemode is creative:
            cancel event
        drawerDropAtLocation(event-block, "§6[§aDrawer§6]", player, event-location)
on break:
    set {_b} to event-block
    set {_u} to type of event-block

    if block above event-block is any sign:
        set {_bb} to block above event-block
        set {_uu} to type of block above event-block
        if "%{_uu}%" contain "floor":
            if player's gamemode is creative:
                cancel event
            drawerDropAtLocation({_bb}, "§6[§aDrawer§6]", player, event-location)
    if block behind event-block is any sign:
        set {_u} to block behind event-block
        set {_uu} to type of {_u}
        if "%{_uu}%" contain "floor":
            stop
        if player's gamemode is creative:
            cancel event
        drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)
    if block southward event-block is any sign:
        set {_t} to type of block southward
        if "%{_t}%" contains "southward":
            set {_u} to block southward event-block
            if player's gamemode is creative:
                cancel event
            drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)
    if block westward event-block is any sign:
        set {_t} to type of block westward
        if "%{_t}%" contains "westward":
            set {_u} to block westward event-block
            if player's gamemode is creative:
                cancel event
            drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)
    if block eastward event-block is any sign:
        set {_t} to type of block eastward
        if "%{_t}%" contain "eastward":
            set {_u} to block eastward event-block
            if player's gamemode is creative:
                cancel event
            drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)