on sign change:
    set {_line} to contenerConfig("data.drawer.line")
    set {_uline} to contenerConfig("data.drawer.uline")
    if line 1 is "drawer":
        if hasPermission(player, "drawer.create") is false:
            cancel event
            send lang("contener.drawer.noPermission", player)
            set line 1 to ""
            stop
        if userDataNumber(player, "data.money") >= contenerConfigNumber("data.drawer.price"):
            moneyRemove(player, contenerConfigNumber("data.drawer.price"), true)
            set line 1 to "§6[§aDrawer§6]"
            set line 2 to "<id>"
            set line 3 to ""
            set line 4 to "<player>"
            logCustom("%selector(event-player)% has just created a drawer at %event-location%", 3)
            logCustom("%selector(event-player)% has just created a drawer at %event-location%", 4)
            logCustom("%selector(event-player)% has just created a drawer at %event-location%", 5)
        else:
            set {_r} to contenerConfigNumber("data.drawer.price") - userDataNumber(player, "data.money")
            set line 1 to ""
            send "%{_line}% §6Drawer§r %{_uline}%" to player
            set {_s} to managerConfig("data.money")
            set {_uuu} to lang("contener.drawer.noEnoughtMoneyWithNumber", player)
            send "%{_uuu}% %{_r}%%{_s}%"
on place:
    set {_b} to event-block
    set {_t} to type of {_b}
    if contenerConfig("data.config.compactDrawer") is "true":
        if "%{_t}%" is contenerConfig("data.config.compactDrawerItem"):
            set {_h} to player's tool
            set {_type} to uncolored line 1 of lore of {_h}
            set {_base} to uncolored contenerConfig("data.config.compactDrawerLore.line1")
            replace {_base} with "" in {_type}
            set {_amount} to uncolored line 2 of lore of {_h}
            set {_base1} to uncolored contenerConfig("data.config.compactDrawerLore.line2")
            replace {_base1} with "" in {_amount}
            set {_amount} to {_amount} parsed as number
            set {_list::*} to yaml list "data.drawer.list" from "bck.manager.contener.data"
            set {_x} to x-coordinate of event-block's location
            set {_y} to y-coordinate of event-block's location
            set {_z} to z-coordinate of event-block's location
            set {_w} to event-block's world
            add "%{_type}%|%{_amount}%|%{_x}%|%{_y}%|%{_z}%|%{_w}%" to {_list::*}
            set yaml list "data.drawer.list" from "bck.manager.contener.data" to {_list::*}
            save yaml "bck.manager.contener.data"
on break:
    set {_b} to event-block
    set {_t} to type of {_b}
    if contenerConfig("data.config.compactDrawer") is "true":
        if "%{_t}%" is contenerConfig("data.config.compactDrawerItem"):
            set {_list::*} to yaml list "data.drawer.list" from "bck.manager.contener.data"
            loop {_list::*}:
                set {_l} to loop-value
                set {_data::*} to {_l} split by "|"
                set {_type} to {_data::1}
                set {_type} to {_type} parsed as item
                set {_amount} to {_data::2}
                set {_amount} to {_amount} parsed as number
                set {_x} to {_data::3}
                set {_y} to {_data::4}
                set {_z} to {_data::5}
                set {_w} to {_data::6}
                set {_w} to "%{_w}%"
                set {_x} to {_x} parsed as number
                set {_y} to {_y} parsed as number
                set {_z} to {_z} parsed as number
                set {_loc} to location({_x}, {_y}, {_z}, {_w}) 
                set {_xx} to x-coordinate of event-location
                set {_yy} to y-coordinate of event-location
                set {_zz} to z-coordinate of event-location
                set {_ww} to {_b}'s world
                set {_loca} to location({_xx}, {_yy}, {_zz}, {_ww}) 
                if "%{_loca}%" contains "%{_loc}%":
                    set block at event-location to air
                    drop {_amount} of {_type} at event-location
                    loop {_list::*}:
                        if loop-value-2 is {_l}:
                            continue
                        else:
                            add loop-value-2 to {_r::*}
                    set yaml list "data.drawer.list" from "bck.manager.contener.data" to {_r::*}
                    save yaml "bck.manager.contener.data"
                else:
                    #send "%event-location% -> %{_loc}%"
on right click on sign:
    set {_line} to yaml value "data.drawer.line" from "bck.manager.contener.config"
    set {_uline} to yaml value "data.drawer.uline" from "bck.manager.contener.config"
    if line 1 is "§6[§aDrawer§6]":
        if hasPermission(player, "drawer.use") is false:
            cancel event
            send lang("contener.drawer.noPermission", player)
            stop
        if player is sneaking:
            #send "§6[§aDrawer§e]§r §7right click §r%player% sneak, (%event-block%)" to player
            set {_player} to line 4 parsed as player
            if player's tool is not air:
                set {_h} to player's tool
                set {_i} to type of player's tool
                set {_n} to item amount of player's tool
                set {_l::*} to uncolored lore of player's tool
                set {_damage} to durability of {_h}
                set {_uuu} to lang("contener.drawer.blackList", player)
                set {_uuuu} to lang("contener.drawer.blackListEnchanted", player)
                set {_wil} to lang("contener.drawer.withLore", player)
                set {_bd} to lang("contener.drawer.blackListDammaged", player)
                if contenerConfig("data.config.compactDrawer") is "true":
                    if "%{_i}%" is contenerConfig("data.config.compactDrawerItem"):
                        set {_type} to uncolored line 1 of lore of {_h}
                        set {_base} to uncolored contenerConfig("data.config.compactDrawerLore.line1")
                        replace {_base} with "" in {_type}
                        set {_amount} to uncolored line 2 of lore of {_h}
                        set {_base1} to uncolored contenerConfig("data.config.compactDrawerLore.line2")
                        replace {_base1} with "" in {_amount}
                        set {_amount} to {_amount} parsed as number
                        set {_amount} to {_amount} * {_n}

                        set {_typeStart} to line 2
                        set {_amountStart} to line 3 parsed as number
                        set {_playerStart} to line 4 parsed as offlineplayer

                        if {_playerStart} is player:
                            if {_typeStart} is {_type}:
                                set line 2 to {_typeStart}
                                set {_rrrr} to {_amountStart} + {_amount}
                                #send "%{_rrrr}% -> %{_amountStart}% -> %{_amount}%"
                                set line 3 to "%{_rrrr}%"
                                set line 4 to "%player%"
                                remove {_n} of {_h} from player's tool
                                stop
                            else:
                                send lang("contener.drawer.noSameItemType", player)
                                stop
                        else:
                            send lang("contener.drawer.signIsNotYours", player)
                            stop

                loop getDrawerItemBlacklist():
                    if loop-value is "%{_i}%":
                        send "%{_line}% §6Drawer§r %{_uline}%" to player
                        send "§b§l%{_i}%§r %{_uuu}%"
                        stop
                loop getDrawerLoreBlacklist():
                    if "%{_l::*}%" contains loop-value:
                        send "%{_line}% §6Drawer§r %{_uline}%" to player
                        send "§b§l%{_i}%§r %{_wil}% §d(%loop-value%) %{_uuu}%"
                        stop
                
                if itemIsEnchanted({_h}) is true:
                    send "%{_line}% §6Drawer§r %{_uline}%" to player
                    send "§b§l%{_i}%§r %{_uuuu}%"
                    stop
                #broadcast "DMG: %{_damage}%"
                if {_damage} >= 1:
                    send "%{_line}% §6Drawer§r %{_uline}%" to player
                    send "§b§l%{_i}%§r %{_bd}%"
                    stop
                #send "Number: %{_n}% / %{_i}%" to player
                if line 2 is "<id>":
                    set line 2 to "%{_i}%"
                    set {_num} to line 3 parsed as integer
                    set line 3 to "%{_num} + {_n}%"
                    set line 4 to "%player%"
                    remove {_n} of {_h} from player's tool
                else if line 2 is not "<id>":
                    set {_type} to line 2
                    set {_ii} to "%{_i}%"
                    if {_ii} = {_type}:
                        set line 2 to "%{_i}%"
                        set {_num} to line 3 parsed as integer
                        set line 3 to "%{_num} + {_n}%"
                        set line 4 to "%player%"
                        remove {_n} of {_h} from player's tool
                    else:
                        send "%{_line}% §6Drawer§r %{_uline}%" to player
                        send lang("contener.drawer.noSameItemType", player)
            else:
                if player is op:
                    set {_item} to line 2 parsed as item
                    set {_amount} to line 3 parsed as integer
                    set {_player} to line 4 parsed as player
                    if line 2 is not "<id>":
                        if line 4 is not "<player>":
                            send formatted "§6§l⦑ Drawer Informations ⦒%nl%§7⁃ Joueur:§b %selector({_player})%%nl%§7⁃ Item:§b %{_item}%%nl%§7⁃ Montant:§b %{_amount}%"
             
        else:
            set {_player} to line 4 parsed as player
            if player's tool is not air:
                set {_h} to player's tool
                set {_i} to type of player's tool
                set {_n} to item amount of player's tool
                set {_l::*} to uncolored lore of player's tool
                set {_damage} to durability of {_h}
                set {_uuu} to lang("contener.drawer.blackList", player)
                set {_uuuu} to lang("contener.drawer.blackListEnchanted", player)
                set {_wil} to lang("contener.drawer.withLore", player)
                set {_bd} to lang("contener.drawer.blackListDammaged", player)

                if contenerConfig("data.config.compactDrawer") is "true":
                    if "%{_i}%" is contenerConfig("data.config.compactDrawerItem"):
                        set {_type} to uncolored line 1 of lore of {_h}
                        set {_base} to uncolored contenerConfig("data.config.compactDrawerLore.line1")
                        replace {_base} with "" in {_type}
                        set {_amount} to uncolored line 2 of lore of {_h}
                        set {_base1} to uncolored contenerConfig("data.config.compactDrawerLore.line2")
                        replace {_base1} with "" in {_amount}
                        set {_amount} to {_amount} parsed as number

                        set {_typeStart} to line 2
                        set {_amountStart} to line 3 parsed as number
                        set {_playerStart} to line 4 parsed as offlineplayer

                        if {_playerStart} is player:
                            if {_typeStart} is {_type}:
                                set line 2 to {_typeStart}
                                set {_rrrr} to {_amountStart} + {_amount}
                                #send "%{_rrrr}% -> %{_amountStart}% -> %{_amount}%"
                                set line 3 to "%{_rrrr}%"
                                set line 4 to "%player%"
                                remove 1 of {_h} from player's tool
                                stop
                            else:
                                send lang("contener.drawer.noSameItemType", player)
                                stop
                        else:
                            send lang("contener.drawer.signIsNotYours", player)
                            stop

                loop getDrawerItemBlacklist():
                    if loop-value is "%{_i}%":
                        send "%{_line}% §6Drawer§r %{_uline}%" to player
                        send "§b§l%{_i}%§r %{_uuu}%"
                        stop
                loop getDrawerLoreBlacklist():
                    if "%{_l::*}%" contains loop-value:
                        send "%{_line}% §6Drawer§r %{_uline}%" to player
                        send "§b§l%{_i}%§r %{_wil}% §d(%loop-value%) %{_uuu}%"
                        stop
                    #broadcast loop-value
                if itemIsEnchanted({_h}) is true:
                    send "%{_line}% §6Drawer§r %{_uline}%" to player
                    send "§b§l%{_i}%§r %{_uuuu}%"
                    stop
                if {_damage} >= 1:
                    send "%{_line}% §6Drawer§r %{_uline}%" to player
                    send "§b§l%{_i}%§r %{_bd}%"
                    stop
                #send "Number: %{_n}% / %{_i}%" to player
                if line 2 is "<id>":
                    if line 4 is "<player>":
                        set line 2 to "%{_i}%"
                        set {_num} to line 3 parsed as integer
                        set line 3 to "%{_num} + 1%"
                        set line 4 to "%player%"
                        remove 1 of {_h} from player's tool
                else if line 2 is not "<id>":
                    if {_player} = player:
                        set {_type} to line 2
                        set {_ii} to "%{_i}%"
                        if {_ii} = {_type}:
                            set line 2 to "%{_i}%"
                            set {_num} to line 3 parsed as integer
                            set line 3 to "%{_num} + 1%"
                            set line 4 to "%player%"
                            remove 1 of {_h} from player's tool
                        else:
                            send "%{_line}% §6Drawer§r %{_uline}%" to player
                            send lang("contener.drawer.noSameItemType", player)
                    else:
                        send "%{_line}% §6Drawer§r %{_uline}%" to player
                        send lang("contener.drawer.signIsNotYours", player)
             
on left click on sign:
    set {_line} to yaml value "data.drawer.line" from "bck.manager.contener.config"
    set {_uline} to yaml value "data.drawer.uline" from "bck.manager.contener.config"
    if line 1 is "§6[§aDrawer§6]":
        if hasPermission(player, "drawer.use") is false:
            cancel event
            send lang("contener.drawer.noPermission", player)
            stop
        if player's gamemode is creative:
            stop
        if player is sneaking:
            set {_player} to line 4 parsed as player
            set {_h} to player's tool
            set {_n} to item amount of player's tool
            set {_i} to line 2 parsed as item
            set {_num} to line 3 parsed as integer
            if line 2 is not "<id>":
                if line 4 is not "<player>":
                    if player = {_player}:
                        if {_num} >= 1:
                            if {_num} = 1:
                                add 1 of {_i} to player's inventory
                                set line 3 to "%{_num} - 1%"
                            else if {_num} < 64:
                                add {_num} of {_i} to player's inventory
                                set line 3 to "%{_num} - {_num}%"
                            else if {_num} >= 64:
                                add 64 of {_i} to player's inventory
                                set line 3 to "%{_num} - 64%"
                        else:
                            set line 2 to "<id>"
                            set line 3 to ""
                            set line 4 to "<player>"
                    else:
                        send "%{_line}% §6Drawer§r %{_uline}%" to player
                        send lang("contener.drawer.signIsNotYours", player) 
            #send "§6[§aDrawer§6]§r §7left click §r%player% sneak, (%event-block%)" to player
        else:
            set {_player} to line 4 parsed as player
            set {_h} to player's tool
            set {_n} to item amount of player's tool
            set {_i} to line 2 parsed as item
            set {_num} to line 3 parsed as integer
            if line 2 is not "<id>":
                if line 4 is not "<player>":
                    if player = {_player}:
                        if {_num} >= 1:
                            add 1 of {_i} to player's inventory
                            set line 3 to "%{_num} - 1%"
                        else:
                            set line 2 to "<id>"
                            set line 3 to ""
                            set line 4 to "<player>"
                    else:
                        send lang("contener.drawer.signIsNotYours", player)
on break of sign:
    if line 1 is "§6[§aDrawer§6]":
        if player's gamemode is creative:
            cancel event
        drawerDropAtLocation(event-block, "§6[§aDrawer§6]", player, event-location)
on break:
    set {_b} to event-block
    set {_u} to type of event-block

    if block above event-block is any sign:
        set {_bb} to block above event-block
        set {_uu} to type of block above event-block
        if "%{_uu}%" contain "floor":
            if player's gamemode is creative:
                cancel event
            drawerDropAtLocation({_bb}, "§6[§aDrawer§6]", player, event-location)
    else if block behind event-block is any sign:
        set {_u} to block behind event-block
        set {_uu} to type of {_u}
        if "%{_uu}%" contain "floor":
            stop
        if player's gamemode is creative:
            cancel event
        drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)
    else if block southward event-block is any sign:
        set {_t} to type of block southward event-block
        if "%{_t}%" contains "southward":
            set {_u} to block southward event-block
            if player's gamemode is creative:
                cancel event
            drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)
    else if block westward event-block is any sign:
        set {_t} to type of block westward event-block
        if "%{_t}%" contain "westward" or "southwestward":
            set {_u} to block westward event-block
            if player's gamemode is creative:
                cancel event
            #send "w %{_t}%"
            drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)
    else if block eastward event-block is any sign:
        set {_t} to type of block eastward event-block
        if "%{_t}%" contain "eastward":
            set {_u} to block eastward event-block
            if player's gamemode is creative:
                cancel event
            drawerDropAtLocation({_u}, "§6[§aDrawer§6]", player, event-location)
function drawerDropAtLocation(u: block, name: text, player: player, location: location):
    set {_l1} to line 1 of {_u}
    set {_l2} to line 2 of {_u}
    set {_l3} to line 3 of {_u}
    set {_l4} to line 4 of {_u}
    if {_l1} is {_name}:
        if {_player}'s gamemode is creative:
            wait 3 ticks
            if {_l1} is set:
                set line 1 of {_u} to {_l1}
            if {_l2} is set:
                set line 2 of {_u} to {_l2}
            if {_l3} is set:
                set line 3 of {_u} to {_l3}
            if {_l4} is set:
                set line 4 of {_u} to {_l4}
        else:
            if {_l2} is set:
                set {_i} to "%{_l2}%" parsed as item
            if {_l3} is set:
                set {_n} to "%{_l3}%" parsed as integer
            if {_l4} is set:
                set {_p} to {_l4} parsed as player
            set {_verif} to contenerConfig("data.config.compactDrawer")
            set {_item} to yaml value "data.config.compactDrawerItem" from "bck.manager.contener.config"
            set {_verif} to {_verif} parsed as boolean
            set {_item} to {_item} parsed as item
            set {_ii} to {_item} named contenerConfig("data.config.compactDrawerName")
            set {_line1} to contenerConfig("data.config.compactDrawerLore.line1")
            set {_line2} to contenerConfig("data.config.compactDrawerLore.line2")
            set line 1 of lore of {_ii} to "%{_line1}%%type of {_i}%"
            set line 2 of lore of {_ii} to "%{_line2}%%{_n}%"
            if {_verif} is false:
                drop {_n} of {_i} at {_location}
            else:
                drop 1 of {_ii} at {_location}
            #send "%{_l1}% | %{_l2}% | %{_l3}% | %{_l4}%" to {_player}
            logCustom("--> %{_l1}%§r %{_l3}% %{_l2}% dropped for %selector({_p})%", 5)