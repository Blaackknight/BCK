command /playersList:
    permission: op
    trigger:
        # set {_gui} to a new chest inventory with 6 rows named "Players List"
        # set {_slot} to 0
        # loop all players:
        #     format slot {_slot} of player with loop-player's skull named "%loop-player%" with lore "§e⧼ Informations ⧽%nl%§e▸ §7Type: Player%nl%§e▸ §7%loop-player's uuid%" to run:
        #     make loop-player execute command "/playerInfos"
        #     set {_item} to loop-player's skull named "%loop-player%"
        #     set slot {_slot} of {gui} to {_item}
        #     add 1 to {_slot}
        #     send "Slot: %{_slot}%" to player
        # open {_gui} to player
        set {_menu} to a new chest inventory with 6 row named "§lPlayers List"
        set {_slot} to 0
        loop all players:
            set {_head} to loop-player's skull named "§b%loop-player%"
            set line 1 of lore of {_head} to "&e⧼ Informations ⧽"
            set line 2 of lore of {_head} to "&e▸ &7Type: Player"
            set line 3 of lore of {_head} to "&e▸ &7%loop-player's uuid%"
            set slot {_slot} of {_menu} to {_head}
            set {inv.%player%} to "playerlist"
            add 1 to {_slot}
        open {_menu} to player
        #open {_gui} to player
on inventory click:
    if {inv.%player%} is "playerlist":
        if click action is left mouse button:
            set {_item} to event-slot
            set {_i} to "%{_item}%"
            cancel event
            if {_i} contain "player head":
                close player's inventory
                set {_player} to "%{_item}%"
                replace "player head item named &b" with "" in {_player}
                set {_player} to {_player} parsed as offlineplayer

                set {_gui} to genericGui("§l%{_player}% infos", 3, true)
                set {_head} to {_player}'s skull named "§b%{_player}%"
                set line 1 of lore of {_head} to "&e⧼ Informations ⧽"
                set line 2 of lore of {_head} to "&e▸ &7Type: Player"
                set line 3 of lore of {_head} to "&e▸ &7%{_player}'s uuid%"
                if {vanished::*} contain {_player}:
                    set {_vanish} to phantom spawn egg named "§7Vanish: §2On"
                else:
                    set {_vanish} to phantom spawn egg named "§7Vanish: §4Off"
                set {_m} to {money.%{_player}'s uuid%}
                set {_money} to paper named "§7Money: §b%{_m}%%{sbm}%"
                set slot 4 of {_gui} to {_head}
                set slot 10 of {_gui} to {_vanish}
                set slot 12 of {_gui} to {_money}
                set {inv.%player%} to "playerinfos"
                open {_gui} to player
        else:
            cancel event
    else if {inv.%player%} is "playerinfos":
        if click action is left mouse button:
            set {_item} to event-slot
            cancel event
            if {_item} is barrier named "§l§4Back":
                close player's inventory
                make player execute command "/playerslist"
        else:
            cancel event
# function genericGui(name: text="Default Inventory", lign: integer=1, backButton: boolean=false) :: inventory:
#     set {_gui} to a new chest inventory with {_lign} row named {_name}
#     if {_backButton} is true:
#         if {_lign} is 1:
#             set slot 8 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
#         else if {_lign} is 2:
#             set slot 13 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
#         else if {_lign} is 3:
#             set slot 22 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
#         else if {_lign} is 3:
#             set slot 31 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"
#         else if {_lign} is 4:
#             set slot 39 of {_gui} to barrier named "§l§4Back" with lore "§7Previous page"       
#     return {_gui}
on inventory close:
    delete {inv.%player%}
    stop    