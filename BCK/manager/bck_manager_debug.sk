on load:
    bckManagerLoad()
    wait 1 seconds
    set {sbm} to yaml value "data.money" from "bck.manager.config"
    set {skn} to "§4BCK§r"

    addDrawerItemBlacklisted("enchanted book")
    addDrawerItemBlacklisted("impulse command block")
    addDrawerItemBlacklisted("chain command block")
    addDrawerItemBlacklisted("repeating command block")

    addDrawerLoreBlacklisted("Rarity")
    addDrawerLoreBlacklisted("Miner")
    addDrawerLoreBlacklisted("AutoSmelt")
    addDrawerLoreBlacklisted("Edit Stick")
    addDrawerLoreBlacklisted("Elevator")

    addSellers("§d§lMateriaux", "§d§lPatrick")
    addSellers("§6§lNourriture", "§6§lJerry")
    addSellers("§b§lPotions", "§b§lOZ")
    addSellers("§a§lConstructions", "§a§lRodrigues")
    addSellers("§1§lPêcheur", "§1§lHector")
    addSellers("§4§lIngénieur", "§4§lZephir")
    addSellers("§e§lPrêtre §e§lGabriel", "§e§lGabriel")
    addSellers("§4&lAssistante de §4§ll'Ingénieur", "§4§lChloé")
    addSellers("§8§lArmurier", "§e§lShane")
    addSellers("§8§lOutilleur", "§e§lNix")
    addSellers("§8§lForgeron d'armes", "§e§lNegon")

    clanRankAdd("Owner")
    clanRankAdd("Co-Owner")
    clanRankAdd("Officier")
    clanRankAdd("Member")

    addServerPermission("op")
    addServerPermission("server.send_message")
    addServerPermission("block.place")
    addServerPermission("block.break")
    addServerPermission("item.drop")
    addServerPermission("item.pickup")
    addServerPermission("server.command")
    addServerPermission("server.owner")
    addServerPermission("drawer.use")
    addServerPermission("drawer.create")
    addServerPermission("bank.use")
    addServerPermission("bank.create")
    addServerPermission("xp_bank.use")
    addServerPermission("xp_bank.create")
    addServerPermission("elevator.delete")
    addServerPermission("elevator.create")
    addServerPermission("box.place")
    addServerPermission("server.command.money.check")

    set {spawnCoordinates::*} to getCoordinateSeparate("%{spawn}%")

on unload:
    delete {clan.ranks::*}
    delete {server.perms::*}
    delete {drawer.lore.blacklist::*}
    delete {drawer.item.blacklist::*}
    delete {generators.types::*}
    delete {sellers::*}
    delete {letters::*}
    loop all players:
        set {editsign.line1.%loop-player%} to false
        set {editsign.line2.%loop-player%} to false
        set {editsign.line3.%loop-player%} to false
        set {editsign.line4.%loop-player%} to false
on break:
    if player is not set:
        set {_player} to "Server"
    else:
        set {_player} to selector(player)
    if hasPermission(player, "block.break") is false:
        cancel event
        send "§c§lHey! §7Tu n'a pas la permission :|"
    else:
        logCustom("%{_player}% has just breaking the §7%event-block%", 5)
on place:
    if player is not set:
        set {_player} to "Server"
    else:
        set {_player} to selector(player)
    if hasPermission(player, "block.place") is false:
        cancel event
        send "§c§lHey! §7Tu n'a pas la permission :|"
    else:
        if "%type of event-block%" is "bite":
            cancel event
        else:
            logCustom("%{_player}% has just placing the §7%event-block%", 5)
on drop:
    if hasPermission(player, "item.drop") is false:
        cancel event
        send "§c§lHey! §7Tu n'a pas la permission :|"
on pickup:
    if hasPermission(player, "item.pickup") is false:
        cancel event
        #send "§c§lHey! §7Tu n'a pas la permission :|"
on command:
    set {_args::*} to arguments
    set {_v} to false
    set {_p::*} to all players
    if {_p::*} contain sender:
        set {_v} to true
        set {_player} to selector(player)
    else:
        set {_player} to "Server"
    if {_v} is true:
        if hasPermission(player, "server.command.%command%") is false:
            cancel event
            send "§c§lHey! §7Tu n'a pas la permission :|"
            #broadcast {_player}
        
    if {_player} is "Server":
        stop
    logCustom("%{_player}% has just executed the command §7/%complete command%", 4)
    logCustom("%{_player}% has just executed the command §7/%complete command%", 5)
on damage:
    if victim is player:
        set {_v} to victim
        set {_a} to attacker
        if damage cause is fall:
            set {_a} to "fall"
        logCustom("%{_v}% has just taken damage by §7%{_a}% (%damage%§4♥§7)§r at %event-location%", 5)
on drop:
    logCustom("%player% has just dropped a §7%event-item%§r on the ground at %event-location%", 5)
on pickup:
    logCustom("%player% has just pickup a §7%event-item%§r at %event-location%", 5)
on enderman pickup:
    logCustom("§l§5Mr Enderman§r just stole a §7%event-block%§r at %event-location%", 5)
on explode:
    logCustom("§4Explosion§r at %event-location%", 5)
on fade of snow layer:
    logCustom("§7%event-block%§r has just melted at %event-location%", 5)
on fade of ice:
    logCustom("§7%event-block%§r has just melted at %event-location%", 5)
on player fish:
    logCustom("%player% has just fished", 5)
on grow:
    logCustom("§7%event-block%§r just sprouted at %event-location%", 5)
on tool break:
    logCustom("%selector(player)%'s tool just broken (§7%event-item%§r)", 5)
on item despawn:
    logCustom("§7%event-item%§r just disappeared at %event-location%", 5)
command /kamikaze [<player>]:
    permission: op
    trigger:
        if arg-1 is set:
            create a fake explosion at arg-1
        else:
            create a fake explosion at player
on explosion prime:
    if {config.explosion} is false:
        cancel event
        set block at event-location to grass block
        set block 1 above event-location to oxeye daisy
        play sound "entity.pig.hurt" with volume 1 at event-location
        delete event-entity
        kill event-entity
every minecraft day in "world":
    add 1 to {world.day}
    logCustom("§71§r added to day", 4)
    logCustom("§71§r added to day", 5)
function bckManagerLoad():
    load yaml "plugins/Skript/scripts/BCK/manager/config.yml" as "bck.manager.config"
    load yaml "plugins/Skript/scripts/BCK/manager/data.yml" as "bck.manager.data"
function bckManagerEditfiles(source: text, find: text="data", mode: text="extract", data: text="") :: text:
	if {_mode} is "extract":
		set {_result} to yaml value "%{_find}%" from "bck.%{_source}%"
		if {_result} isn't set:
			if {_data} isn't empty:
				set {_result} to {_data}
	else if {_mode} is "delete":
		set {_result} to yaml value "%{_find}%" from "bck.%{_source}%"
		if {_result} is set:
			delete yaml value "%{_find}%" from "bck.%{_source}%"
			save yaml "bck.%{_source}%"
	else:
		set yaml value "%{_find}%" from "bck.%{_source}%" to {_data}
		save yaml "bck.%{_source}%"
	return {_result}