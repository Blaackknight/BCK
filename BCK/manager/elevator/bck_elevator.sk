on load:
    if {skripts::*} contains "core.sk" and "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading elevator..." to console
        send "§6[§4BCK§6/§7Elevator§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/elevator/config.yml" as "bck.manager.elevator.config"
        load yaml "plugins/Skript/scripts/BCK/manager/elevator/data.yml" as "bck.manager.elevator.data"
    else:
        broadcast "§6[§4BCK§6/§7Elevator§6]§r Script loading cancel It requires (§lcore.sk§r and §lbck_manager.sk§r)"
        unload script file "bck_elevator.sk"
options:
    block: copper block
    line: &8&m---&r
on player move:
    set {_v} to velocity of player
    set {_data::*} to "%{_v}%" split by ","
    set {_y} to {_data::2}
    replace " y: " with "" in {_y}
    set {_y} to {_y} parsed as number
    #send action bar "%{_y}%" to player
    if {_y} is less than -0.08:
        set {jump.%player%} to true
    else if {jump.%player%} is true:
        set {jump.%player%} to false

every tick:
    loop all players:
        set {_pp} to loop-player
        if {jump.%{_pp}%} is not true:
            stop
        set {_v} to false
        loop {elevator.blocks::*}:
            if block below {_pp} is loop-value-2:
                set {_v} to true
        if {_v} is false:
            stop
        loop integers between 0 and 100:
            set {_y} to false
            set {_n} to loop-value-2
            loop {elevator.blocks::*}:
                #send loop-value-2 to {_pp}
                if block {_n} above block above {_pp} is loop-value-3:
                    set {_y} to true
            if {_y} is true:
                set {_j} to block above block loop-number above block above {_pp}
                {_j} is passable
                set {_p} to location of {_pp}
                set y-coord of {_p} to floor(y-coord of {_j})
                teleport {_pp} to {_p}
                set {_co} to false
                if {coordinate.%{_pp}%} is true:
                    set {_co} to true
                if {_co} is true:
                    set {coordinate.%{_pp}%} to false
                send action bar "&a⬆ &8┃ &a&lUp" to {_pp}
                play sound "block.note_block.bell" to {_pp}
                set {jump.%{_pp}%} to false
                if {_co} is true:
                    wait 1 second
                    set {coordinate.%{_pp}%} to true

# on jump:
# 	if block below player is {@block}:
# 		loop 256 times:
# 			if block loop-number up player is {@block}:
# 				loop 256 times:
# 					if block loop-number-2 down player's location is {@block}:
# 						add 1 to {_floor}
# 				teleport player to location loop-number+1 up player's location
# 				send action bar "&a⬆ &8┃ &a&lUp" to player
# 				stop
	
on sneak toggle:
    set {_v} to false
    loop {elevator.blocks::*}:
        set {_bb} to block below player
        if {_bb} is loop-value:
            set {_v} to true
    if {_v} is false:
        stop
    player is sneaking
    loop integers between 1 and 100:
        set {_y} to false
        loop {elevator.blocks::*}:
            if block loop-value-1 below block below player is loop-value-2:
                set {_y} to true
        if {_y} is true:
            set {_b} to block above block loop-value below block below player
            {_b} is passable
            set {_p} to location of player
            set y-coord of {_p} to floor(y-coord of {_b})
            teleport player to {_p}
            play sound "block.note_block.bell" to player
            set {_co} to false
            if {coordinate.%player%} is true:
                set {_co} to true
            if {_co} is true:
                set {coordinate.%player%} to false
            send action bar "&c⬇ &8┃ &c&lDown" to player
            set {jump.%player%} to false
            if {_co} is true:
                wait 1 second
                set {coordinate.%player%} to true
            set {jump.%player%} to false
            stop

command /elevator [<text>]:
    trigger:
        set {_blocks::*} to all blocks
        set {_el} to lang("elevator.elevator", player)
        if arg-1 is set:
            if arg-1 is "create":
                set {_t} to player's tool
                set {_ty} to type of {_t}
                if {_t} is air:
                    send "{@line} %{_el}% {@line}" to player
                    send lang("elevator.handNotEmpty", player)
                    stop
                if isBlockWithItem({_t}) is false:
                    send "{@line} %{_el}% {@line}" to player
                    set {_uuu} to lang("elevator.elevatorCanBeAddedTo", player)
                    send "%{_uuu}% (%{_t}%)"
                    #send {_blocks::*}
                    stop
                set {_lore::*} to uncolored lore of player's tool
                loop {_lore::*}:
                    if loop-value is not "⦉ Elevator ⦊":
                        exit loop
                    else:
                        send "{@line} %{_el}% {@line}" to player
                        send lang("elevator.blockAlreadyElevator", player)
                        play sound "entity.villager.no" with volume 0.5 at player
                        stop
                #send {_lore::*}
                set line 1 of lore of player's tool to "§7§l⦉ §dElevator §7§l⦊§r"
                play sound "entity.experience_orb.pickup" with volume 0.4 at player
            else if arg-1 is "list":
                set {_uuu} to lang("elevator.elevatorList.title", player)
                send "{@line} %{_uuu}% {@line}" to player
                set {_c} to listCounter({elevator.blocks::*})
                if {_c} < 20:
                    loop {elevator.blocks::*}:
                        send "§8-§r%loop-value%"
                else:
                    send lang("elevator.numberToMany", player)
                set {_uuu} to lang("elevator.elevatorCounter", player)
                send "%{_uuu}% §b§l%{_c}%"
            else if arg-1 is "visible":
                set {_c} to 0
                loop {elevator.blocks::*}:
                    set {_b} to loop-value
                    set {_t} to type of {_b}
                    set {_name} to "%{_t}%"
                    replace all " " with "_" in {_name}
                    set {_l} to location of {_b}
                    set {_data::*} to "%{_l}%" split by ","
                    set {_x} to {_data::1}
                    set {_y} to {_data::2}
                    set {_z} to {_data::3}
                    replace "x: " with "" in {_x}
                    replace " y: " with "" in {_y}
                    replace " z: " with "" in {_z}
                    set {_x} to "%{_x}%" parsed as number
                    set {_y} to "%{_y}%" parsed as number
                    set {_z} to "%{_z}%" parsed as number
                    set {_y} to {_y} -0.5
                    #send "%{_x}%|%{_y}%|%{_z}%"
                    make console execute command "/summon falling_block %{_x}% %{_y}% %{_z}% {Size:1,NoAI:1b,Silent:1B,Invulnerable:1b,PersistantRequired:1b,Invisible:1b,Tags:[elevator],Glowing:1b,Team:elevator,ActiveEffects:[{Id:14,ShowParticles:0b}],BlockState:{Name:bedrock},NoGravity:1b,Time:1}"
                    #make console execute command "/execute at @e[x=%{_x}%,y=%{_y}%,z=%{_z}%] run summon armor_stand ~ ~ ~"
                    #make console execute command "/execute at @e[x=%{_x}%,y=%{_y}%,z=%{_z}%] run data modify entity @e[tag=elevator,limit=1,distance=..1] Glowing set value 1b"
                    add 1 to {_c}
                make console execute command "/team join elevator @e[tag=elevator]"
                set {_elv} to lang("elevator.elevatorVisible", player)
                send "{@line} %{_el}% {@line}" to player
                send "§b§l%{_c}% %{_elv}%"
                wait 5 second 
                make console execute command "/kill @e[tag=elevator]"
                send "{@line} %{_el}% {@line}" to player
                set {_eli} to lang("elevator.elevatorInvisible", player)
                send "§b§l%{_c}% %{_eli}%"
            else:
                send "{@line} %{_el}% {@line}" to player
                send lang("elevator.unknownOption", player)
        else:
            send "{@line} %{_el}% {@line}" to player
            send "§c/elevator <option>"
on place:
    set {_t} to player's tool
    set {_lore::*} to uncolored lore of {_t}
    if {_lore::*} contain "⦉ Elevator ⦊":
        if hasPermission(player, "elevator.create") is false:
            cancel event
            send lang("elevator.noPermission", player)
            stop
        add event-block to {elevator.blocks::*}
        send action bar lang("elevator.elevatorCreated", player) to player
        play sound "block.note_block.bell" with volume 1 with pitch 1 at player
        logCustom("§7%selector(player)% has been §7created elevator§r at %event-location%", 4)
        logCustom("§7%selector(player)% has been §7created elevator§r at %event-location%", 5)
    else:
        stop
on break:
    loop {elevator.blocks::*}:
        set {_b} to loop-value
        if event-block is {_b}:
            if hasPermission(player, "elevator.delete") is false:
                cancel event
                send lang("elevator.noPermission", player)
                stop
            remove {_b} from {elevator.blocks::*}
            send action bar lang("elevator.elevatorDeleted", player) to player
            play sound "entity.firework_rocket.blast_far" with volume 1 with pitch 0.7 at player
            logCustom("§7%selector(player)% has been §7deleted elevator§r at %event-location%", 4)
            logCustom("§7%selector(player)% has been §7deleted elevator§r at %event-location%", 5)
on tab complete of "/elevator":
    if hasPermission(player, "server.command.elevator") is false:
        stop
    set tab completions for position 1 to "create", "visible" and "list"