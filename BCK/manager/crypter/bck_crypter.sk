on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading crypter..." to console
        send "§6[§4BCK§6/§3Crypter§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/crypter/config.yml" as "bck.manager.crypter.config"
        load yaml "plugins/Skript/scripts/BCK/manager/crypter/data.yml" as "bck.manager.crypter.data"
    else:
        broadcast "§6[§4BCK§6/§3Crypter§6]§r Script loading cancel It requires (bck_manager.sk)"
        unload script file "bck_crypter.sk"
command /crypt [<text>] [<text>]:
    trigger:
        if arg-1 is set:
            if arg-1 is "ovor":
                set {_t} to crypting(arg-2)
                set {_f} to "<insertion:%{_t}%>%{_t}%"
                broadcast formatted "Crypting: %arg-2% -> %{_f}%"
        else:
            send "§c/crypt <type> <text>"
function crypting(text: text, type: text="ovor") :: text:
    set {_data::*} to {_text} split by ""
    set {_r} to ""
    #broadcast yaml value "data.mapping.%{_type}%.A" from "bck.manager.crypter.config"
    loop {_data::*}:
       # set {_texts::*} to yaml list "data.mapping.%{_type}%" from "bck.manager.crypter.config"
        set {_b} to yaml value "data.mapping.%{_type}%.%loop-value%" from "bck.manager.crypter.config"
        #set {_b} to "%{_b}%"
        #set {_b} to crypterConfig("data.mapping.%{_type}%.%loop-value%")
        set {_l} to length of {_b} 
        set {_bb} to substring of {_b} from 0 to {_l}
        #broadcast "%{_bb}%"
        if {_bb} isn't "<none>":
            set {_r} to "%{_r}%%{_bb}%" 
            #set {_b} to ""
    replace all "<none>" with "" in {_r}
    return {_r}
function crypterConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.crypter.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.crypter.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.crypter.config"
            save yaml "bck.manager.crypter.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.crypter.config" to {_data}
            save yaml "bck.manager.crypter.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.crypter.config" to {_data}
        save yaml "bck.manager.crypter.config"
    return "%{_result}%"