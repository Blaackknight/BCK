on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading box..." to console
        send "§6[§4BCK§6/§1Box§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/box/config.yml" as "bck.manager.box.config"
        load yaml "plugins/Skript/scripts/BCK/manager/box/data.yml" as "bck.manager.box.data"
        customRecipes()
    else:
        broadcast "§6[§4BCK§6/§1Box§6]§r Script loading cancel It requires (bck_manager.sk)"
        unload script file "bck_box.sk"
on place:
    set {_i} to player's tool
    set {_t} to type of {_i}
    set {_n} to display name of {_i}
    set {_lore} to uncolored line 1 of lore of {_i}
    if "%{_t}%" contains boxConfig("data.config.item"):
        if {_n} is boxConfig("data.config.name"):
            if hasPermission(player, "box.place") is false:
                cancel event
                send "§c§lHey! §7Tu n'a pas la permission :|"
                stop
            set {_data::*} to {_lore} split by " "
            set {_box} to {_data::2}
            set {_list::*} to yaml list "data.box.list" from "bck.manager.box.data"
            add "%{_box}%|%event-location%" to {_list::*}
            set yaml list "data.box.list" from "bck.manager.box.data" to {_list::*}
            save yaml "bck.manager.box.data"
            send "§6[§4BCK§6/§1Box§6]§r §eBox §b%{_box}%§r §eplacer !"
            logCustom("§7%selector(player)%§r has been placed box §7§l%{_box}%", 4)
            logCustom("§7%selector(player)%§r has been placed box §7§l%{_box}%", 5)
on break:
    set {_b} to event-block
    set {_t} to type of {_b}
    if "%{_t}%" contains boxConfig("data.config.item"):
        if hasPermission(player, "box.remove") is false:
            cancel event
            send "§c§lHey! §7Tu n'a pas la permission :|"
            stop
        set {_list::*} to yaml list "data.box.list" from "bck.manager.box.data"
        loop {_list::*}:
            set {_data::*} to loop-value split by "|"
            set {_box} to {_data::1}
            set {_loc} to textToLoc({_data::2})
            #send "%locToText(event-location)% | %locToText({_loc})%"
            if locToText(event-location) is locToText({_loc}):
                send "§6[§4BCK§6/§1Box§6]§r §eBox §b%{_box}%§r §eenlever !"
                logCustom("§7%selector(player)%§r has been break box §7§l%{_box}%", 4)
                logCustom("§7%selector(player)%§r has been break box §7§l%{_box}%", 5)
            else:
                add loop-value to {_r::*}
        set yaml list "data.box.list" from "bck.manager.box.data" to {_r::*}
        save yaml "bck.manager.box.data"
on right click:
    if clicked block is set:
        if player is sneaking:
            set {_b} to event-block
            set {_t} to type of {_b}
            if "%{_t}%" contains boxConfig("data.config.item"):
                set {_list::*} to yaml list "data.box.list" from "bck.manager.box.data"
                loop {_list::*}:
                    set {_data::*} to loop-value split by "|"
                    set {_box} to {_data::1}
                    set {_loc} to textToLoc({_data::2})
                    if locToText(event-location) is locToText({_loc}):
                        cancel event
                        boxGuiMain(player, {_box})
        else:
            set {_ii} to player's tool
            set {_tt} to type of {_ii}
            set {_nn} to display name of {_ii}
            set {_lore} to uncolored line 1 of lore of {_ii}
            
            set {_b} to event-block
            set {_l} to player's tool
            set {_t} to type of {_b}
            if "%{_t}%" contains boxConfig("data.config.item"):
                set {_list::*} to yaml list "data.box.list" from "bck.manager.box.data"
                loop {_list::*}:
                    set {_data::*} to loop-value split by "|"
                    set {_box} to {_data::1}
                    set {_loc} to textToLoc({_data::2})
                    if locToText(event-location) is locToText({_loc}):
                        set {_i} to boxConfig("data.config.key.item")
                        set {_i} to {_i} parsed as item
                        set {_k} to {_i} named boxConfig("data.config.key.name")
                        set {_size} to boxConfigNumber("data.config.guiSize")
                        cancel event
                        if {_l} is not {_k}:
                            stop
                        boxGuiMain(player, {_box}, false)
                        set {_gui} to player's current inventory
                        loop boxConfigNumber("data.config.waitTime") times:
                            boxRandomizer({_gui}, {_size}, {_box})
                            play sound "block.note_block.harp" with volume 1 with pitch 0.8 at player's location
                            wait 0.11 seconds
                            boxRandomizer({_gui}, {_size}, {_box})
                            play sound "block.note_block.harp" with volume 1 with pitch 0.8 at player's location
                            wait 0.11 seconds
                        boxRandomizer({_gui},{_size},{_box},false)
                        set {_lists::*} to yaml list "data.box.%{_box}%.rewards" from "bck.manager.box.config"
                        set {_re} to random item out of listToItemList({_lists::*})
                        set {_default} to boxConfigNumber("data.box.%{_box}%.maxStack")
                        if {_default} < 1:
                            set {_default} to 64
                        else if {_default} is not set:
                            set {_default} to 64
                        set {_count} to random integer between 1 and {_default}
                        set slot 13 of {_gui} to {_count} of {_re}
                        set {_sloot} to slot 13 of {_gui}
                        if player's inventory has space for {_sloot}:
                            give {_sloot} to player
                        else:
                            drop {_sloot} at player
                        play sound "block.note_block.pling" with volume 1 with pitch 1 at player's location
                        wait 3 seconds
                        if userData(player, "data.inv") is "manager.box.main":
                            close the player's inventory

                            
                        
on inventory click:
    if userData(player, "data.inv") is "manager.box.main":
        cancel event
function boxGuiMain(player: player, box: text, items: boolean=true):
    set {_guiname} to boxConfig("data.config.guiName")
    set {_size} to boxConfigNumber("data.config.guiSize")
    replace "<name>" with {_box} in {_guiname}
    set {_gui} to genericGui({_guiname}, {_size})
    boxRandomizer({_gui}, {_size}, {_box}, {_items})
    open {_gui} to {_player}
    userData({_player}, "data.inv", "set", "manager.box.main")
function boxRandomizer(gui: inventory, size: number=3, box: text, items: boolean=true):
    set {_slotCount} to 0
    loop {_size} times:
        add 9 to {_slotCount}
    set {_slot} to 0
    loop {_slotCount} times:
        set {_list::*} to yaml list "data.config.glasses" from "bck.manager.box.config"
        set slot {_slot} of {_gui} to random item out of listToItemList({_list::*})
        add 1 to {_slot}
    set {_slotItemCount} to {_slotCount} / 3
    set {_slotItemCount} to {_slotItemCount} - 2
    set {_slotI} to {_slotItemCount} + 3
    if {_items} is false:
        stop
    loop {_slotItemCount} times:
        set {_lists::*} to yaml list "data.box.%{_box}%.rewards" from "bck.manager.box.config"
        set {_default} to boxConfigNumber("data.box.%{_box}%.maxStack")
        if {_default} < 1:
            set {_default} to 64
        else if {_default} is not set:
            set {_default} to 64
        set {_count} to random integer between 1 and {_default}
        set slot {_slotI} of {_gui} to {_count} of random item out of listToItemList({_lists::*})
        add 1 to {_slotI}
function listToItemList(list: objects) :: objects:
    loop {_list::*}:
        set {_i} to loop-value parsed as item
        add {_i} to {_r::*}
    return {_r::*}
command /box [<text>] [<text>]:
    trigger:
        if arg-1 is set:
            if arg-1 is "give":
                if arg-2 is set:
                    if boxList() contains arg-2:
                        set {_i} to boxConfig("data.config.item")
                        set {_i} to {_i} parsed as item
                        set {_box} to {_i} named boxConfig("data.config.name")
                        set line 1 of lore of {_box} to "§6⭃ §b§l%arg-2%"
                        give {_box} to player
                    else:
                        send "§cBox introuvable (%arg-2%)"
                else:
                    send "§c/box %arg-1% <box>"
            else if arg-1 is "key":
                set {_i} to boxConfig("data.config.key.item")
                set {_i} to {_i} parsed as item
                set {_k} to {_i} named boxConfig("data.config.key.name")
                give {_k} to player
            else if arg-1 is "list":
                set {_b::*} to boxList()
                send "§8---------{ §1§lBoxList§r §8}---------"
                loop {_b::*}:
                    set {_rew::*} to yaml list "data.box.%loop-value%.rewards" from "bck.manager.box.config"
                    set {_default} to boxConfigNumber("data.box.%loop-value%.maxStack")
                    if {_default} < 1:
                        set {_default} to "64 §o(défault)"
                    else if {_default} is not set:
                        set {_default} to "64 §o(défault)"
                    else:
                        set {_default} to "64 §o(custom)"
                    send "§a%loop-value% §6->§r §b%{_rew::*}% §6-> §dmax: §c%{_default}%"
                set {_t} to pluriel("Total", listCounter({_b::*}))
                send "§6%{_t}%: §c%listCounter({_b::*})%"
            else:
                send "§cOption incconue (%arg-1%)"
        else:
            send "§c/box <option>"
on tab complete of "/box":
    set tab completions for position 1 to "give", "key" and "list"
    if tab arg-1 is "give":
        set tab completions for position 2 to boxList()
    if tab arg-2 is set:
        set tab completions for position 3 to yaml list "data.box.%tab arg-2%" from "bck.manager.box.config"
function locToText(data: location) :: text:
    set {_loc::*} to "%{_data}%" split by ","
    set {_x} to {_loc::1}
    replace "x:" with "" in {_x}
    replace all " " with "" in {_x}
    set {_y} to {_loc::2}
    replace " y:" with "" in {_y}
    replace all " " with "" in {_y}
    set {_z} to {_loc::3}
    replace " z:" with "" in {_z}
    replace all " " with "" in {_z}
    set {_w::*} to {_loc::5} split by "in"
    replace "'" with "" in {_w::2}
    replace all " " with "" in {_w::2}
    set {_w} to {_w::2}
    set {_x} to {_x} parsed as number
    set {_y} to {_y} parsed as number
    set {_z} to {_z} parsed as number
    return "%{_x}%/%{_y}%/%{_z}%/%{_w}%"
function textToLoc(data: text) :: location:
    set {_loc::*} to {_data} split by ","
    set {_x} to {_loc::1}
    replace "x:" with "" in {_x}
    replace all " " with "" in {_x}
    set {_y} to {_loc::2}
    replace " y:" with "" in {_y}
    replace all " " with "" in {_y}
    set {_z} to {_loc::3}
    replace " z:" with "" in {_z}
    replace all " " with "" in {_z}
    set {_w::*} to {_loc::5} split by "in"
    replace "'" with "" in {_w::2}
    replace all " " with "" in {_w::2}
    set {_w} to {_w::2}
    set {_x} to {_x} parsed as number
    set {_y} to {_y} parsed as number
    set {_z} to {_z} parsed as number
    return location({_x}, {_y}, {_z}, {_w})
function boxList() :: objects :
    set {_list::*} to yaml node keys "data.box" from "bck.manager.box.config"
    loop {_list::*}:
        add loop-value to {_r::*}
    return {_r::*}
function pluriel(word: text, num: number) :: text:
    if {_num} > 1:
        set {_r} to "%{_word}%s"
    else:
        set {_r} to "%{_word}%"
    return {_r}
function boxRewardsList(box: text) :: objects :
    set {_reward} to yaml value "data.box.%{_box}%.rewards" from "bck.manager.box.config"
    replace all " " with "" in {_reward}
    set {_rewards::*} to "%{_reward}%" split by ","
    loop {_rewards::*}:
        set {_l} to loop-value
        set {_i} to {_l} parsed as item
        add {_i} to {_rew::*}
    return {_rew::*}
function boxConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.box.config"
            save yaml "bck.manager.box.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.box.config" to {_data}
            save yaml "bck.manager.box.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.box.config" to {_data}
        save yaml "bck.manager.box.config"
    return "%{_result}%"
function boxConfigNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.box.config"
            save yaml "bck.manager.box.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.box.config" to {_data}
            save yaml "bck.manager.box.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.box.config" to {_data}
        save yaml "bck.manager.box.config"
    set {_r} to "%{_result}%" parsed as number
    return {_r}
function boxData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.box.data"
            save yaml "bck.manager.box.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.box.data" to {_data}
            save yaml "bck.manager.box.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.box.data" to {_data}
        save yaml "bck.manager.box.data"
    return "%{_result}%"
function boxDataNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.box.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.box.data"
            save yaml "bck.manager.box.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.box.data" to {_data}
            save yaml "bck.manager.box.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.box.data" to {_data}
        save yaml "bck.manager.box.data"
    set {_r} to "%{_result}%" parsed as number
    return {_r}