on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading recipe..." to console
        send "§6[§4BCK§6/§aRecipe§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/recipe/config.yml" as "bck.manager.recipe.config"
        load yaml "plugins/Skript/scripts/BCK/manager/recipe/data.yml" as "bck.manager.recipe.data"
        set {_i} to dirt named "§l§dSuper §6§ldirt"
        addCustomRecipe("bck_test", {_i}, dirt, dirt, dirt, dirt)
    else:
        broadcast "§6[§4BCK§6/§aRecipe§6]§r Script loading cancel It requires (bck_manager.sk)"
        unload script file "bck_recipe.sk"
function addCustomRecipe(id: text, result: item, slot1: item=air, slot2: item=air, slot3: item=air, slot4: item=air, slot5: item=air, slot6: item=air, slot7: item=air, slot8: item=air, slot9: item=air):
    register new shapeless recipe for {_strong} using {_slot1}, {_slot2}, {_slot3}, {_slot4}, {_slot5}, {_slot6}, {_slot7}, {_slot8} and {_slot9} with id {_id}
    add custom recipe {_id} to {_book}
    set {_list::*} to yaml list "data.recipes" from "bck.manager.recipe.data"
    if {_list::*} is set:
        set yaml list "data.recipes" from "bck.manager.recipe.data" to {_list::*}
    else:
        set {_t} to type of {_result}
        set {_n} to display name of {_result}
        if {_n} is not set:
            set {_n} to {_t}
        add "%{_id}%|%{_t}%|%{_n}%" to {_list::*}
        broadcast {_result}
        set yaml list "data.recipes" from "bck.manager.recipe.data" to {_list::*}
function recipeConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.config"
            save yaml "bck.manager.recipe.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
            save yaml "bck.manager.recipe.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
        save yaml "bck.manager.recipe.config"
    return "%{_result}%"
function recipeConfigNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.config"
            save yaml "bck.manager.recipe.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
            save yaml "bck.manager.recipe.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.config" to {_data}
        save yaml "bck.manager.recipe.config"
    set {_r} to "%{_result}%" parsed as number
    return {_r}
function recipeData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.data"
            save yaml "bck.manager.recipe.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
            save yaml "bck.manager.recipe.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
        save yaml "bck.manager.recipe.data"
    return "%{_result}%"
function recipeDataNumber(find: text, mode: text="extract", data: text="") :: number:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.recipe.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.recipe.data"
            save yaml "bck.manager.recipe.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
            save yaml "bck.manager.recipe.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.recipe.data" to {_data}
        save yaml "bck.manager.recipe.data"
    set {_r} to "%{_result}%" parsed as number
    return {_r}