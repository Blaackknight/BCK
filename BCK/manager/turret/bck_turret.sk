on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading turret..." to console
        send "§6[§4BCK§6/§eTurret§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/turret/config.yml" as "bck.manager.turret.config"
        load yaml "plugins/Skript/scripts/BCK/manager/turret/data.yml" as "bck.manager.turret.data"
    else:
        broadcast "§6[§4BCK§6/§eTurret§6]§r Script loading cancel It requires (bck_manager.sk)"
        unload script file "bck_turret.sk"
command /turret [<text>]:
    trigger:
        if targeted block is set:
            set {_x} to x-coordinate of location of targeted block
            set {_y} to y-coordinate of location of targeted block
            set {_z} to z-coordinate of location of targeted block
            set {_loc} to location({_x}, {_y}+0.5, {_z})
        else:
            set {_loc} to player's location
        spawn armor stand at {_loc}
        mobNbtEditLoc({_loc}, "armor_stand", "Small", "1b")
        set {_turret} to the spawned entity
        set {_h} to yaml value "data.turret.%arg-1%.helmet" from "bck.manager.turret.config"
        set {_h} to {_h} parsed as item
        set helmet of {_turret} to {_h}
        set block at {_loc} to barrier
        set {_list::*} to yaml list "data.turret.%player's uuid%" from "bck.manager.turret.data"
        set {_x} to x-coordinate of {_turret}
        set {_y} to y-coordinate of {_turret}
        set {_z} to z-coordinate of {_turret}
        add "%arg-1%|%{_turret}%|%{_x}%|%{_y}%|%{_z}%" to {_list::*}
        set yaml list "data.turret.%player's uuid%" from "bck.manager.turret.data" to {_list::*}
        save yaml "bck.manager.turret.data"
on tab complete of "/turret":
    set tab completions for position 1 to turretList()
command /wave [<number=5>]:
    trigger:
        set {_loc} to player's location
        waveDustParticle({_loc}, cyan, arg-1)
on right click:
    set {_b} to targeted block
    if {_b} is set:
        set {_l} to player's tool
        set {_ds} to display name of {_l}
        if {_l} is stick:
            if {_ds} is "Wave":
                set {_l} to {_b}'s location
                set {_x} to x-coordinate of {_l}
                set {_y} to y-coordinate of {_l}
                set {_z} to z-coordinate of {_l}
                set {_loc} to location({_x}, {_y}, {_z})
                waveDustParticle({_loc}, cyan, 5)
function waveDustParticle(loc: location, color: color, radius: number=3):
    set {_n} to 1
    set {_r} to {_radius}
    set {_rr} to {_r} * 10
    set {_ry} to 0
    loop {_rr} times:
        bckParticleDustLoc({_loc}, {_color}, 100, 5, {_n}, {_ry})
        add 0.1 to {_ry}
        wait 1 tick
on death:
    loop all players:
        set {_p} to loop-player
        set {_list::*} to yaml list "data.turret.%{_p}'s uuid%" from "bck.manager.turret.data"
        set {_r::*} to {_list::*}
        loop {_list::*}:
            set {_data::*} to loop-value-2 split by "|"
            set {_t} to {_data::1}
            set {_e} to {_data::2}
            set {_e} to "%{_e}%"
            set {_x} to {_data::3}
            set {_y} to {_data::4}
            set {_z} to {_data::5}
            replace ".5" with "" in {_x}
            replace ".5" with "" in {_y}
            replace ".5" with "" in {_z}
            set {_x} to {_x} parsed as number
            set {_y} to {_y} parsed as number
            set {_z} to {_z} parsed as number
            set {_loc} to location({_x}, {_y}, {_z})
            set {_xx} to x-coordinate of victim's location
            set {_yy} to y-coordinate of victim's location
            set {_zz} to z-coordinate of victim's location
            set {_xx} to "%{_xx}%"
            set {_yy} to "%{_yy}%"
            set {_zz} to "%{_zz}%"
            replace ".5" with "" in {_xx}
            replace ".5" with "" in {_yy}
            replace ".5" with "" in {_zz}
            set {_xx} to {_xx} parsed as number
            set {_yy} to {_yy} parsed as number
            set {_zz} to {_zz} parsed as number
            set {_vloc} to location({_xx}, {_yy}, {_zz})
            #broadcast "%{_vloc}% | %{_loc}%"
            if "%victim%" is {_e}:
                #broadcast "%{_vloc}% | %{_loc}%"
                if "%{_vloc}%" is "%{_loc}%":
                    remove "%loop-value-2%" from {_r::*}
                    send "Tourelle §b%{_t}% §renlever !" to {_p}
        set yaml list "data.turret.%{_p}'s uuid%" from "bck.manager.turret.data" to {_r::*}
        save yaml "bck.manager.turret.data"
on right click:
    if player is sneaking:
        set {_te} to target entity
        if {_te} is set:
            set {_list::*} to yaml list "data.turret.%player's uuid%" from "bck.manager.turret.data"
            loop {_list::*}:
                set {_data::*} to loop-value split by "|"
                set {_t} to {_data::1}
                set {_e} to {_data::2}
                set {_e} to "%{_e}%"
                set {_x} to {_data::3}
                set {_y} to {_data::4}
                set {_z} to {_data::5}
                replace ".5" with "" in {_x}
                replace ".5" with "" in {_y}
                replace ".5" with "" in {_z}
                set {_x} to {_x} parsed as number
                set {_y} to {_y} parsed as number
                set {_z} to {_z} parsed as number
                set {_loc} to location({_x}, {_y}, {_z})
                set {_xx} to x-coordinate of {_te}'s location
                set {_yy} to y-coordinate of {_te}'s location
                set {_zz} to z-coordinate of {_te}'s location
                set {_xx} to "%{_xx}%"
                set {_yy} to "%{_yy}%"
                set {_zz} to "%{_zz}%"
                replace ".5" with "" in {_xx}
                replace ".5" with "" in {_yy}
                replace ".5" with "" in {_zz}
                set {_xx} to {_xx} parsed as number
                set {_yy} to {_yy} parsed as number
                set {_zz} to {_zz} parsed as number
                set {_vloc} to location({_xx}, {_yy}, {_zz})
                if "%{_te}%" is {_e}:
                    if "%{_vloc}%" is "%{_loc}%":
                        turretGuiMain(player, {_t})
                        turretData("data.temp.%player's uuid%.turretGuiType", "set", {_t})
function turretGuiMain(player: player, type: text):
    set {_guiName} to turretConfig("data.turret.%{_type}%.guiName")
    set {_guiDefaultName} to turretConfig("data.config.gui.defaultName")
    if "%{_guiName}%" is "<none>":
        set {_guiname} to {_guiDefaultName}
    replace all "<type>" with {_type} in {_guiname}
    set {_gui} to genericGui({_guiName}, 3)
    set {_whiteList::*} to yaml list "data.whitelist.turret.%{_player}'s uuid%" from "bck.manager.turret.data"
    set {_blackList::*} to yaml list "data.blacklist.turret.%{_player}'s uuid%" from "bck.manager.turret.data"
    set {_whitelistAdd} to turretConfig("data.config.gui.whiteListAdd")
    set {_whitelistRemove} to turretConfig("data.config.gui.whiteListRemove")
    set {_whitelist} to paper named "§n§lWhiteList"
    set line 2 of lore of {_whitelist} to {_whitelistAdd}
    set line 3 of lore of {_whitelist} to {_whitelistRemove}
    set {_line} to 4
    loop {_whiteList::*}:
        set line {_line} of {_whitelist} to "§6-> §b%loop-value%§r"
        add 1 to {_line}
    set {_blacklistAdd} to turretConfig("data.config.gui.blackListAdd")
    set {_blacklistRemove} to turretConfig("data.config.gui.blackListRemove")
    set {_blacklist} to paper named "§8§n§lBlackList"
    set line 2 of lore of {_blacklist} to {_blacklistAdd}
    set line 3 of lore of {_blacklist} to {_blacklistRemove}
    set {_bline} to 4
    loop {_blackList::*}:
        set line {_bline} of {_blacklist} to "§6-> §b%loop-value%§r"
        add 1 to {_bline}
    set {_remove} to tnt named "§4§l§nEnlever"
    set line 2 of lore of {_remove} to "§fPermet de supprimer la tourelle"
    
    set slot 12 of {_gui} to {_whitelist}
    set slot 14 of {_gui} to {_blacklist}
    set slot 26 of {_gui} to {_remove}
    open {_gui} to {_player}
    userData({_player}, "data.inv", "set", "manager.turret.inside")
function whitelistSystem(player: player, option: text):
    set {_whiteList::*} to yaml list "data.whitelist.turret.%{_player}'s uuid%" from "bck.manager.turret.data"
    if {_option} is "add":
        turretData("data.temp.%{_player}'s uuid%.whitelistAdd", "set", "true")
        close {_player}'s inventory
        make {_player} execute command "/turretwa %{_player}%"
    else if {_option} is "remove":
        turretData("data.temp.%{_player}'s uuid%.whitelistRemove", "set", "true")
        close {_player}'s inventory
        make {_player} execute command "/turretwr %{_player}%"
function blacklistSystem(player: player, option: text):
    set {_blackList::*} to yaml list "data.blacklist.turret.%{_player}'s uuid%" from "bck.manager.turret.data"
    if {_option} is "add":
    else if {_option} is "remove":
on inventory click:
    if userData(player, "data.inv") is "manager.turret.inside":
        cancel event
        if click action is left mouse button:
            set {_s} to event-slot
            set {_n} to display name of {_s}
            set {_un} to uncolored display name of {_s}
            if "%{_s}%" contains "paper":
                if "%{_un}%" is "WhiteList":
                    set {_t} to turretData("data.temp.%player's uuid%.turretGuiType")
                    whitelistSystem(player, "add")
                else if "%{_un}%" is "BlackList":
                    set {_t} to turretData("data.temp.%player's uuid%.turretGuiType")
                    blacklistSystem(player, "add")
            else if "%{_s}%" contains "tnt":
                if "%{_un}%" is "Enlever":
                    set {_b} to targeted block
                    set {_tb} to type of {_b}
                    if "%{_tb}%" is not "barrier block":
                        send "§cIl faut viser la tourelle !"
                        stop
                    set {_bb} to {_b}'s location
                    set {_x} to x-coordinate of {_bb}
                    set {_y} to y-coordinate of {_bb}
                    set {_z} to z-coordinate of {_bb}
                    set {_loc} to location({_x}, {_y}, {_z})
                    close player's inventory
                    make console execute command "/execute at @e[type=armor_stand,x=%{_x}%,y=%{_y}%,z=%{_z}%,distance=..1] run kill @e[type=armor_stand,limit=1,distance=..1]"
                    set block at {_loc} to air
        else if click action is right mouse button:
            if "%{_s}%" contains "paper":
                if "%{_un}%" is "WhiteList":
                    set {_t} to turretData("data.temp.%player's uuid%.turretGuiType")
                    whitelistSystem(player, "remove")
                else if "%{_un}%" is "BlackList":
                    set {_t} to turretData("data.temp.%player's uuid%.turretGuiType")
                    blacklistSystem(player, "remove")
            
every 25 ticks:
    loop all entities:
        if "%loop-entity%" is "armor stand":
            set {_turret} to loop-entity
            set {_helmet} to {_turret}'s helmet
            set {_laser} to yaml value "data.turret.laser.helmet" from "bck.manager.turret.config"
            set {_slow} to yaml value "data.turret.slow.helmet" from "bck.manager.turret.config"
            set {_collector} to yaml value "data.turret.collector.helmet" from "bck.manager.turret.config"
            set {_heal} to yaml value "data.turret.heal.helmet" from "bck.manager.turret.config"
            set {_laser} to {_laser} parsed as item
            set {_slow} to {_slow} parsed as item
            set {_collector} to {_collector} parsed as item
            set {_heal} to {_heal} parsed as item
            #broadcast "%{_laser}% | %{_slow}% | %{_collector}% | %{_heal}%"
            if {_helmet} is {_laser}:
                if {_turret} is dead:
                    stop
                set {_loc} to {_turret}'s location
                
                set {_laserRadius} to yaml value "data.turret.laser.radius" from "bck.manager.turret.config"
                if {_laserRadius} is "<none>":
                    set {_laserRadius} to yaml value "data.config.defaultRadius" from "bck.manager.turret.config"
                set {_laserRadius} to "%{_laserRadius}%" parsed as number
                #broadcast "%{_laserRadius}%"
                loop all living entities in radius {_laserRadius} around {_loc}:
                    set {_target} to loop-entity-2
                    if "%{_target}%" contains "dropped":
                        #broadcast {_target}
                    else if "%{_target}%" is "armor stand":
                        #broadcast {_target}
                    else if {_target}'s gamemode is creative or spectator:
                        #dd
                    else if {_noAggro::*} contains {_target}:
                        #dd
                    else:
                        #lerp 1.5 soul at {_target} with offset vector(0, 1, 0) with extra 0.04
                        #lerp 1 of dust_color_transition using dustTransition(cyan, cyan, 3) at {_target} with offset vector(0, 1, 0) with extra 0.1 
                        loop 2 times:
                            set {_x} to x-coordinate of {_turret}'s location
                            set {_y} to y-coordinate of {_turret}'s location
                            set {_z} to z-coordinate of {_turret}'s location
                            set {_xx} to x-coordinate of {_turret}'s eye location
                            set {_yy} to y-coordinate of {_turret}'s eye location
                            set {_zz} to z-coordinate of {_turret}'s eye location
                            set {_xxx} to x-coordinate of {_target}'s eye location
                            set {_yyy} to y-coordinate of {_target}'s eye location
                            set {_zzz} to z-coordinate of {_target}'s eye location
                            set {_dist} to distance between {_turret} and {_target}
                            set {_loc1} to location({_x}, {_y}+1.5, {_z})
                            set {_loc2} to location({_xx}, {_yy}, {_zz})
                            set {_loc3} to location({_xxx}, {_yyy}-0.2, {_zzz})
                            set {_t} to ceil({_dist})
                            set {_t} to {_t} * 2
                            set {_v} to vector from {_turret} to {_target}
                            set vector length of {_v} to 0.1
                            set {_verif} to true
                            loop (distance between {_loc} and {_target}) / 0.1 times:
                                set {_bb} to block at {_loc2}
                                if "%{_bb}%" contains "air" or "water" or "lava" or "short grass" or "slab" or "lever" or "torch" or "carpet" or "barrier":
                                    set {_laserRayColor} to yaml value "data.turret.laser.rayColor" from "bck.manager.turret.config"
                                    set {_laserRaySize} to yaml value "data.turret.laser.raySize" from "bck.manager.turret.config"
                                    set {_laserRayColor} to "%{_laserRayColor}%" parsed as color
                                    set {_laserRaySize} to "%{_laserRaySize}%" parsed as number
                                    draw 1 of dust using dustOption({_laserRayColor}, {_laserRaySize}) at {_loc2} with force
                                    set {_loc2} to {_loc2} ~ {_v}
                                    #wait 1 tick
                                else:
                                    #broadcast {_bb}
                                    set {_verif} to false
                            if {_verif} is true:
                                set {_laserHit} to yaml value "data.turret.laser.hitParticle" from "bck.manager.turret.config"
                                set {_laserDamage} to yaml value "data.turret.laser.damage" from "bck.manager.turret.config"
                                if {_laserDamage} is "<none>":
                                    set {_laserDamage} to yaml value "data.config.defaultDamage" from "bck.manager.turret.config"
                                set {_laserDamage} to "%{_laserDamage}%" parsed as number
                                set {_laserHit} to {_laserHit} parsed as item
                                make 10 of block particle using {_laserHit} at {_loc3}
                                damage {_target} by {_laserDamage} hearts
                                add 1 to {turret.timer.%{_target}%}
                                set {_verif} to false
            else if {_helmet} is {_slow}:
                if {_turret} is dead:
                    stop
                set {_loc} to {_turret}'s location
                
                #set {_r} to yaml value "data.radius" from "bck.manager.turret.config"
                set {_slowRadius} to yaml value "data.turret.slow.radius" from "bck.manager.turret.config"
                if {_slowRadius} is "<none>":
                    set {_slowRadius} to yaml value "data.config.defaultRadius" from "bck.manager.turret.config"
                set {_slowRadius} to "%{_slowRadius}%" parsed as number
                #broadcast "%{_slowRadius}%"
                loop all living entities in radius {_slowRadius} around {_loc}:
                    set {_target} to loop-entity-2
                    if "%{_target}%" contains "dropped":
                        #broadcast {_target}
                    else if "%{_target}%" is "armor stand":
                        #broadcast {_target}
                    else if {_target}'s gamemode is creative or spectator:
                        #dd
                    else if {_noAggro::*} contains {_target}:
                        #dd
                    else:
                        #lerp 1.5 soul at {_target} with offset vector(0, 1, 0) with extra 0.04
                        #lerp 1 of dust_color_transition using dustTransition(cyan, cyan, 3) at {_target} with offset vector(0, 1, 0) with extra 0.1 
                        loop 2 times:
                            set {_x} to x-coordinate of {_turret}'s location
                            set {_y} to y-coordinate of {_turret}'s location
                            set {_z} to z-coordinate of {_turret}'s location
                            set {_xx} to x-coordinate of {_turret}'s eye location
                            set {_yy} to y-coordinate of {_turret}'s eye location
                            set {_zz} to z-coordinate of {_turret}'s eye location
                            set {_xxx} to x-coordinate of {_target}'s eye location
                            set {_yyy} to y-coordinate of {_target}'s eye location
                            set {_zzz} to z-coordinate of {_target}'s eye location
                            set {_dist} to distance between {_turret} and {_target}
                            set {_loc1} to location({_x}, {_y}+1.5, {_z})
                            set {_loc2} to location({_xx}, {_yy}, {_zz})
                            set {_loc3} to location({_xxx}, {_yyy}-0.2, {_zzz})
                            set {_t} to ceil({_dist})
                            set {_t} to {_t} * 2
                            set {_v} to vector from {_turret} to {_target}
                            set vector length of {_v} to 0.1
                            set {_verif} to true
                            loop (distance between {_loc} and {_target}) / 0.1 times:
                                set {_bb} to block at {_loc2}
                                if "%{_bb}%" contains "air" or "water" or "lava" or "short grass" or "slab" or "lever" or "torch" or "carpet" or "barrier":
                                    set {_slowRayColor} to yaml value "data.turret.slow.rayColor" from "bck.manager.turret.config"
                                    set {_slowRaySize} to yaml value "data.turret.slow.raySize" from "bck.manager.turret.config"
                                    set {_slowRayColor} to {_slowRayColor} parsed as color
                                    set {_slowRaySize} to "%{_slowRaySize}%" parsed as number
                                    #broadcast "%{_slowRayColor}% | %{_slowRaySize}%"
                                    draw 1 of dust using dustOption({_slowRayColor}, {_slowRaySize}) at {_loc2} with force
                                    set {_loc2} to {_loc2} ~ {_v}
                                    #wait 1 tick
                                else:
                                    #broadcast {_bb}
                                    set {_verif} to false
                            if {_verif} is true:
                                set {_slowHit} to yaml value "data.turret.slow.hitParticle" from "bck.manager.turret.config"
                                set {_slowDamage} to yaml value "data.turret.slow.damage" from "bck.manager.turret.config"
                                set {_slowSlowness} to yaml value "data.turret.slow.slowness" from "bck.manager.turret.config"
                                if {_slowDamage} is "<none>":
                                    set {_slowDamage} to yaml value "data.config.defaultDamage" from "bck.manager.turret.config"
                                set {_slowDamage} to "%{_slowDamage}%" parsed as number
                                set {_slowHit} to {_slowHit} parsed as item
                                set {_slowSlowness} to "%{_slowSlowness}%" parsed as number
                                #make 1 of block particle using redstone block at {_loc3}
                                loop 5 times:
                                    lerp 10 of block particle using {_slowHit} at {_target} with offset vector(0.25, 1, 0.25) with extra 0.1 
                                damage {_target} by {_slowDamage} hearts
                                apply slowness {_slowSlowness} to {_target} for 0.7 seconds
                                add 1 to {turret.timer.%{_target}%}
                                set {_verif} to false
            else if {_helmet} is {_collector}:
                if {_turret} is dead:
                    stop
                set {_loc} to {_turret}'s location
                
                set {_collectorRadius} to yaml value "data.turret.collector.radius" from "bck.manager.turret.config"
                if {_collectorRadius} is "<none>":
                    set {_collectorRadius} to yaml value "data.config.defaultRadius" from "bck.manager.turret.config"
                set {_collectorRadius} to "%{_collectorRadius}%" parsed as number
                loop all entities in radius {_collectorRadius} around {_loc}:
                    set {_target} to loop-entity-2
                    if "%{_target}%" is "armor stand":
                        #broadcast {_target}
                    else if {_noAggro::*} contains {_target}:
                        #dd
                    else if "%{_target}%" contains "dropped":
                        #lerp 1.5 soul at {_target} with offset vector(0, 1, 0) with extra 0.04
                        #lerp 1 of dust_color_transition using dustTransition(cyan, cyan, 3) at {_target} with offset vector(0, 1, 0) with extra 0.1 
                        loop 2 times:
                            set {_x} to x-coordinate of {_turret}'s location
                            set {_y} to y-coordinate of {_turret}'s location
                            set {_z} to z-coordinate of {_turret}'s location
                            set {_xx} to x-coordinate of {_turret}'s eye location
                            set {_yy} to y-coordinate of {_turret}'s eye location
                            set {_zz} to z-coordinate of {_turret}'s eye location
                            set {_xxx} to x-coordinate of {_target}'s eye location
                            set {_yyy} to y-coordinate of {_target}'s eye location
                            set {_zzz} to z-coordinate of {_target}'s eye location
                            set {_xxxx} to x-coordinate of {_target}'s location
                            set {_yyyy} to y-coordinate of {_target}'s location
                            set {_zzzz} to z-coordinate of {_target}'s location
                            set {_dist} to distance between {_turret} and {_target}
                            set {_loc1} to location({_x}, {_y}+1.5, {_z})
                            set {_loc2} to location({_xx}, {_yy}-1.25, {_zz})
                            set {_loc22} to location({_xxxx}, {_yyyy}+0.5, {_zzzz})
                            set {_loc3} to location({_xxx}, {_yyy}-1.5, {_zzz})
                            set {_t} to ceil({_dist})
                            set {_t} to {_t} * 2
                            set {_v} to vector from {_target} to {_turret}
                            set vector length of {_v} to 0.1
                            set {_verif} to true
                            set {_ccc} to 0
                            loop (distance between {_target} and {_loc}) / 0.1 times:
                                set {_bb} to block at {_loc22}
                                if "%{_bb}%" contains "air" or "water" or "lava" or "short grass" or "slab" or "lever" or "torch" or "carpet" or "barrier":
                                    if {_verif} is true:
                                        set {_collectorRayColor} to yaml value "data.turret.collector.rayColor" from "bck.manager.turret.config"
                                        set {_collectorRaySize} to yaml value "data.turret.collector.raySize" from "bck.manager.turret.config"
                                        set {_collectorRayColor} to {_collectorRayColor} parsed as color
                                        set {_collectorRaySize} to "%{_collectorRaySize}%" parsed as number
                                        draw 1 of dust using dustOption({_collectorRayColor}, {_collectorRaySize}) at {_loc22} with force
                                        set {_loc22} to {_loc22} ~ {_v}
                                        if {_ccc} < 15:
                                            wait 1 tick
                                        add 1 to {_ccc}
                                else:
                                    #broadcast {_bb}
                                    set {_verif} to false
                            if {_verif} is true:
                                set {_collectorCollectParticle} to yaml value "data.turret.collector.collectParticle" from "bck.manager.turret.config"
                                set {_collectorCollectParticleSound} to yaml value "data.turret.collector.collectSound" from "bck.manager.turret.config"
                                set {_collectorCollectParticleNumber} to yaml value "data.turret.collector.collectParticleNumber" from "bck.manager.turret.config"
                                set {_collectorCollectParticle} to "%{_collectorCollectParticle}%" parsed as particle
                                set {_collectorCollectParticleNumber} to "%{_collectorCollectParticleNumber}%" parsed as number
                                make {_collectorCollectParticleNumber} of {_collectorCollectParticle} at {_target}'s location
                                play sound "%{_collectorCollectParticleSound}%" with volume 0.7 at {_target}'s location
                                wait 5 tick
                                teleport {_target} to {_turret}
                                
                                set {_verif} to false
            else if {_helmet} is {_heal}:
                if {_turret} is dead:
                    stop
                set {_loc} to {_turret}'s location
                
                set {_healRadius} to yaml value "data.turret.heal.radius" from "bck.manager.turret.config"
                if {_healRadius} is "<none>":
                    set {_healRadius} to yaml value "data.config.defaultRadius" from "bck.manager.turret.config"
                set {_healRadius} to "%{_healRadius}%" parsed as number
                loop all living entities in radius {_healRadius} around {_loc}:
                    set {_target} to loop-entity-2
                    if "%{_target}%" contains "dropped":
                        #broadcast {_target}
                    else if "%{_target}%" is "armor stand":
                        #broadcast {_target}
                    else if {_target}'s gamemode is creative or spectator:
                        #dd
                    else if {_target} is not player:
                        #dd
                    else if {_noAggro::*} contains {_target}:
                        #dd
                    else:
                        #lerp 1.5 soul at {_target} with offset vector(0, 1, 0) with extra 0.04
                        #lerp 1 of dust_color_transition using dustTransition(cyan, cyan, 3) at {_target} with offset vector(0, 1, 0) with extra 0.1 
                        loop 2 times:
                            set {_x} to x-coordinate of {_turret}'s location
                            set {_y} to y-coordinate of {_turret}'s location
                            set {_z} to z-coordinate of {_turret}'s location
                            set {_xx} to x-coordinate of {_turret}'s eye location
                            set {_yy} to y-coordinate of {_turret}'s eye location
                            set {_zz} to z-coordinate of {_turret}'s eye location
                            set {_xxx} to x-coordinate of {_target}'s eye location
                            set {_yyy} to y-coordinate of {_target}'s eye location
                            set {_zzz} to z-coordinate of {_target}'s eye location
                            set {_dist} to distance between {_turret} and {_target}
                            set {_loc1} to location({_x}, {_y}+1.5, {_z})
                            set {_loc2} to location({_xx}, {_yy}, {_zz})
                            set {_loc3} to location({_xxx}, {_yyy}-0.2, {_zzz})
                            set {_t} to ceil({_dist})
                            set {_t} to {_t} * 2
                            set {_v} to vector from {_turret} to {_target}
                            set vector length of {_v} to 0.1
                            set {_verif} to true
                            loop (distance between {_loc} and {_target}) / 0.1 times:
                                set {_bb} to block at {_loc2}
                                if "%{_bb}%" contains "air" or "water" or "lava" or "short grass" or "slab" or "lever" or "torch" or "carpet" or "barrier":
                                    set {_healRayColor1} to yaml value "data.turret.heal.rayColor1" from "bck.manager.turret.config"
                                    set {_healRayColor2} to yaml value "data.turret.heal.rayColor2" from "bck.manager.turret.config"
                                    set {_healRaySize} to yaml value "data.turret.heal.raySize" from "bck.manager.turret.config"
                                    set {_healRayColor1} to {_healRayColor1} parsed as color
                                    set {_healRayColor2} to {_healRayColor2} parsed as color
                                    set {_healRaySize} to "%{_healRaySize}%" parsed as number
                                    lerp 2 of dust_color_transition using dustTransition({_healRayColor1}, {_healRayColor2}, {_healRaySize}) at {_turret} with offset vector(5, 5, 5) with extra 0.1 
                                    #draw 1 of dust using dustOption(lime, 1) at {_loc2} with force
                                    set {_loc2} to {_loc2} ~ {_v}
                                    #wait 1 tick
                                else:
                                    #broadcast {_bb}
                                    set {_verif} to false
                            if {_verif} is true:
                                set {_h} to 3
                                #make 10 of block particle using lime glazed terracotta at {_loc3}
                                set {_healRayColorCircle1} to yaml value "data.turret.heal.rayColorCircle1" from "bck.manager.turret.config"
                                set {_healRayColorCircle2} to yaml value "data.turret.heal.rayColorCircle2" from "bck.manager.turret.config"
                                set {_healRayColorCircle3} to yaml value "data.turret.heal.rayColorCircle3" from "bck.manager.turret.config"
                                set {_healHealSound} to yaml value "data.turret.heal.healSound" from "bck.manager.turret.config"
                                set {_healRayColorCircle1} to {_healRayColorCircle1} parsed as color
                                set {_healRayColorCircle2} to {_healRayColorCircle2} parsed as color
                                set {_healRayColorCircle3} to {_healRayColorCircle3} parsed as color
                                bckParticleDust({_target}, {_healRayColorCircle1}, 50, 1)
                                bckParticleDust({_target}, {_healRayColorCircle2}, 50, 1, 1)
                                bckParticleDust({_target}, {_healRayColorCircle3}, 50, 1, 2)
                                set {_h} to {_target}'s health
                                set {_hm} to {_target}'s max health
                                if {_h} = {_hm}:
                                    set {_healAbsoption} to yaml value "data.turret.heal.absorption" from "bck.manager.turret.config"
                                    set {_healAbsoption} to "%{_healAbsoption}%" parsed as number
                                    apply absorption {_healAbsoption} to {_target} for 0.7 seconds
                                else:
                                    set {_healHeal} to yaml value "data.turret.heal.heal" from "bck.manager.turret.config"
                                    set {_healHeal} to "%{_healHeal}%" parsed as number
                                    heal {_target} by {_healHeal} hearts
                                play sound "%{_healHealSound}%" with volume 0.2 with pitch 2 at {_target}'s location
                                #add 1 to {turret.timer.%{_target}%}
                                set {_verif} to false
                                    
every 2 tick:
    loop all entities:
        set {_t} to {turret.timer.%loop-entity%}
        if {_t} > 0:
            remove 1 from {turret.timer.%loop-entity%}
on death of player:
    set {_t} to {turret.timer.%victim%}
    if {_t} > 0:
        set death message to ""
        broadcast formatted "%selector(victim)% looked at a turret"
on left click with diamond hoe:
    if target entity is set:
        if "%target entity%" contains "dropped":
            stop
        else:
            #send target entity to player
            set {_V} to vector from player to target entity
            set vector length of {_V} to 0.1
            #set {_loc} to location of player
            set {_x} to x-coordinate of player's location
            set {_y} to y-coordinate of player's location
            set {_z} to z-coordinate of player's location
            add 1.5 to {_y}
            set {_loc} to location({_x}, {_y}, {_z})
            loop (distance between {_loc} and target entity) / 0.1 times:
                #draw 1 dust_color_transition using dustTransition(red, red, 2) at {_loc} with force
                draw 1 of dust using dustOption(red, 1) at {_loc} with force
                set {_loc} to {_loc} ~ {_v}
            set {_xx} to x-coordinate of target entity's location
            set {_yy} to y-coordinate of target entity's location
            set {_zz} to z-coordinate of target entity's location
            add 1.5 to {_yy}
            set {_loc1} to location({_xx}, {_yy}, {_zz})
            loop 10 times:
                make 10 of block particle using redstone block at {_loc1}
            kill target entity
function turretList() :: objects:
    set {_list::*} to yaml node keys "data.turret" from "bck.manager.turret.config"
    loop {_list::*}:
        add loop-value to {_r::*}
    return {_r::*}
function turretConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.turret.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.turret.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.turret.config"
            save yaml "bck.manager.turret.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.turret.config" to {_data}
            save yaml "bck.manager.turret.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.turret.config" to {_data}
        save yaml "bck.manager.turret.config"
    return "%{_result}%"
function turretData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.turret.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.turret.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.turret.data"
            save yaml "bck.manager.turret.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.turret.data" to {_data}
            save yaml "bck.manager.turret.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.turret.data" to {_data}
        save yaml "bck.manager.turret.data"
    return "%{_result}%"