on load:
    set {_list::*} to {skripts::*}
    if {_list::*} contains "bck_manager.sk":
        send "§6[§4BCK§6]§r Loading crypter..." to console
        send "§6[§4BCK§6/§3Crypter§6]§r Loaded successfully !" to console
        load yaml "plugins/Skript/scripts/BCK/manager/crypter/config.yml" as "bck.manager.crypter.config"
        load yaml "plugins/Skript/scripts/BCK/manager/crypter/data.yml" as "bck.manager.crypter.data"
    else:
        broadcast "§6[§4BCK§6/§3Crypter§6]§r Script loading cancel It requires (bck_manager.sk)"
        unload script file "bck_crypter.sk"
command /crypt [<text>] [<text>]:
    trigger:
        if arg-1 is set:
            set {_t} to crypting(arg-2, arg-1)
            set {_f} to "<insertion:%{_t}%>%{_t}%"
            broadcast formatted "Crypting: %arg-2% -> %{_f}%"
            crypterData("data.temp.%player's uuid%", "set", {_t})
        else:
            send "§c/crypt <type> <text>"
on tab complete of "/crypt":
    set tab completions for position 1 to getCryptLanguages()
on tab complete of "/decrypt":
    set tab completions for position 1 to getCryptLanguages()
command /decrypt [<text>] [<text>]:
    trigger:
        if arg-1 is set:
            set {_t} to decrypting(arg-2, arg-1)
            set {_f} to "<insertion:%{_t}%>%{_t}%"
            broadcast formatted "Decrypting: %arg-2% -> %{_f}%"
        else:
            send "§c/crypt <type> <text>"
command /chat [<text>]:
    trigger:
        if arg-1 is set:
            if getChats() contains arg-1:
                set {_defaultA::*} to yaml list "data.chat.default" from "bck.manager.crypter.data"
                set {_cryptedA::*} to yaml list "data.chat.crypted" from "bck.manager.crypter.data"
                set {_opA::*} to yaml list "data.chat.op" from "bck.manager.crypter.data"
                set {_ownerA::*} to yaml list "data.chat.owner" from "bck.manager.crypter.data"

                loop {_defaultA::*}:
                    if loop-value isn't player's uuid:
                        add loop-value to {_default::*}
                loop {_cryptedA::*}:
                    if loop-value isn't player's uuid:
                        add loop-value to {_crypted::*}
                loop {_opA::*}:
                    if loop-value isn't player's uuid:
                        add loop-value to {_op::*}
                loop {_ownerA::*}:
                    if loop-value isn't player's uuid:
                        add loop-value to {_owner::*}
                
                set yaml list "data.chat.default" from "bck.manager.crypter.data" to {_default::*}
                set yaml list "data.chat.crypted" from "bck.manager.crypter.data" to {_crypted::*}
                set yaml list "data.chat.op" from "bck.manager.crypter.data" to {_op::*}
                set yaml list "data.chat.owner" from "bck.manager.crypter.data" to {_owner::*}
                save yaml "bck.manager.crypter.data"
                userData(player, "data.chat", "set", arg-1)
                set {_chat::*} to yaml list "data.chat.%arg-1%" from "bck.manager.crypter.data"
                if {_chat::*} contains player's uuid:
                    #ddd
                else:
                    add player's uuid to {_chat::*}
                set yaml list "data.chat.%arg-1%" from "bck.manager.crypter.data" to {_chat::*}
                save yaml "bck.manager.crypter.data"
            else:
                send "§cChat introuvable.."
        else:
            send "§c/chat <chat>"
on tab complete of "/chat":
    set tab completions for position 1 to getChats()
function getChats() :: objects:
    loop yaml node keys "data.chat" from "bck.manager.crypter.config":
        add loop-node to {_nodes::*}
    loop {_nodes::*}:
        set {_l} to loop-value
        replace "data.chat." with "" in {_l}
        add {_l} to {_r::*}
    return {_r::*}
function getCryptLanguages() :: objects:
    loop yaml node keys "data.mapping" from "bck.manager.crypter.config":
        add loop-node to {_nodes::*}
    loop {_nodes::*}:
        set {_l} to loop-value
        replace "data.mapping." with "" in {_l}
        add {_l} to {_r::*}
    return {_r::*}
function crypting(text: text, type: text="ovor") :: text:
    set {_data::*} to {_text} split by ""
    set {_r} to ""
    loop {_data::*}:
        set {_b} to yaml value "data.mapping.%{_type}%.%loop-value%" from "bck.manager.crypter.config"
        set {_l} to length of {_b} 
        set {_bb} to substring of {_b} from 0 to {_l}
        if {_bb} isn't "<none>":
            set {_r} to "%{_r}%%{_bb}%" 
    replace all "<none>" with "" in {_r}
    return {_r}
function decrypting(text: text, type: text="ovor") :: text:
    loop yaml node keys "data.mapping.%{_type}%" from "bck.manager.crypter.config":
        add loop-node to {_nodes::*}
    loop {_nodes::*}:
        set {_l} to loop-value
        set {_d} to crypterConfig({_l})
        replace "data.mapping.%{_type}%." with "" in {_l}
        if {_text} contains {_d}:
            replace all {_d} with {_l} in {_text}
    set {_r} to "%{_text}%"
    return {_r}
function crypterConfig(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.crypter.config"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.crypter.config"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.crypter.config"
            save yaml "bck.manager.crypter.config"
        else:
            set yaml value "%{_find}%" from "bck.manager.crypter.config" to {_data}
            save yaml "bck.manager.crypter.config"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.crypter.config" to {_data}
        save yaml "bck.manager.crypter.config"
    return "%{_result}%"
function crypterData(find: text, mode: text="extract", data: text="") :: text:
    if {_mode} is "extract":
        set {_result} to yaml value "%{_find}%" from "bck.manager.crypter.data"
        if {_result} isn't set:
            if {_data} isn't empty:
                set {_result} to {_data}
    else if {_mode} is "delete":
        set {_result} to yaml value "%{_find}%" from "bck.manager.crypter.data"
        if {_result} is set:
            delete yaml value "%{_find}%" from "bck.manager.crypter.data"
            save yaml "bck.manager.crypter.data"
        else:
            set yaml value "%{_find}%" from "bck.manager.crypter.data" to {_data}
            save yaml "bck.manager.crypter.data"
    else if {_mode} is "set":
        set yaml value "%{_find}%" from "bck.manager.crypter.data" to {_data}
        save yaml "bck.manager.crypter.data"
    return "%{_result}%"
on chat:
    if hasPermission(player, "server.send_message") is false:
        cancel event
        send "§c§lHey! §7Tu n'a pas la permission :|"
        stop
    set {_chat} to userData(player, "data.chat")
    if {_chat} is not set:
        set {_chat} to "default"
    if {_chat} is "crypted":
        if world of player is "world":
            cancel event
            set {_m} to crypting(message, "ovor")
            set {_m} to "<insertion:%{_m}%>%{_m}%"
            set {_msg} to "[§aOverworld§r] §7§n<crypted>§r %{_m}%"
            set {_pp::*} to yaml list "data.chat.crypted" from "bck.manager.crypter.data"
            loop {_pp::*}:
                set {_l} to loop-value
                set {_p} to {_l} parsed as offlineplayer
                add {_p} to {_p::*}
            send formatted {_msg} to {_p::*}
        else if world of player is "world_nether":
            cancel event
            set {_m} to crypting(message, "ovor")
            set {_m} to "<insertion:%{_m}%>%{_m}%"
            set {_msg} to "[§4Nether§r] §7§n<crypted>§r %{_m}%"
            set {_pp::*} to yaml list "data.chat.crypted" from "bck.manager.crypter.data"
            loop {_pp::*}:
                set {_l} to loop-value
                set {_p} to {_l} parsed as offlineplayer
                add {_p} to {_p::*}
            send formatted {_msg} to {_p::*}
        else if world of player is "world_the_end":
            cancel event
            set {_m} to crypting(message, "ovor")
            set {_m} to "<insertion:%{_m}%>%{_m}%"
            set {_msg} to "[§eEnd§r] §7§n<crypted>§r %{_m}%"
            set {_pp::*} to yaml list "data.chat.crypted" from "bck.manager.crypter.data"
            loop {_pp::*}:
                set {_l} to loop-value
                set {_p} to {_l} parsed as offlineplayer
                add {_p} to {_p::*}
            send formatted {_msg} to {_p::*}
    else if {_chat} is "op":
    else if {_chat} is "owner":
    else:
        if world of player is "world":
            cancel event
            set {_msg} to "[§aOverworld§r] <%selector(player)%> %message%"
            broadcast formatted {_msg}
            #send {_msg} to channel with id "1103405488953102339" with "%{bot}%"
        else if world of player is "world_nether":
            cancel event
            set {_msg} to "[§4Nether§r] <%selector(player)%> %message%"
            broadcast formatted {_msg}
            #send {_msg} to channel with id "1103405488953102339" with "%{bot}%"
        else if world of player is "world_the_end":
            cancel event
            set {_msg} to "[§eEnd§r] <%selector(player)%> %message%"
            broadcast formatted {_msg}
            #send {_msg} to channel with id "1103405488953102339" with "%{bot}%"
        else:
            cancel event
            set {_msg} to "[§7Void§r] <%selector(player)%> %message%"
            broadcast formatted {_msg}